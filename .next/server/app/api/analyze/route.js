/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze/route";
exports.ids = ["app/api/analyze/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=D%3A%5Ccoding%5Claunch%5CthoughtPolice%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Ccoding%5Claunch%5CthoughtPolice&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=D%3A%5Ccoding%5Claunch%5CthoughtPolice%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Ccoding%5Claunch%5CthoughtPolice&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_coding_launch_thoughtPolice_src_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/analyze/route.ts */ \"(rsc)/./src/app/api/analyze/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze/route\",\n        pathname: \"/api/analyze\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze/route\"\n    },\n    resolvedPagePath: \"D:\\\\coding\\\\launch\\\\thoughtPolice\\\\src\\\\app\\\\api\\\\analyze\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_coding_launch_thoughtPolice_src_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhbmFseXplJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW5hbHl6ZSUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDY29kaW5nJTVDbGF1bmNoJTVDdGhvdWdodFBvbGljZSU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RCUzQSU1Q2NvZGluZyU1Q2xhdW5jaCU1Q3Rob3VnaHRQb2xpY2UmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ21CO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJEOlxcXFxjb2RpbmdcXFxcbGF1bmNoXFxcXHRob3VnaHRQb2xpY2VcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYW5hbHl6ZVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYW5hbHl6ZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2FuYWx5emVcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2FuYWx5emUvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJEOlxcXFxjb2RpbmdcXFxcbGF1bmNoXFxcXHRob3VnaHRQb2xpY2VcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYW5hbHl6ZVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=D%3A%5Ccoding%5Claunch%5CthoughtPolice%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Ccoding%5Claunch%5CthoughtPolice&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/analyze/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/analyze/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_redditApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/redditApi */ \"(rsc)/./src/lib/services/redditApi.ts\");\n/* harmony import */ var _lib_services_multiModelPipeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/services/multiModelPipeline */ \"(rsc)/./src/lib/services/multiModelPipeline.ts\");\n\n\n\nasync function POST(request) {\n    try {\n        const { username, verbose = false } = await request.json();\n        if (!username) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Username is required'\n            }, {\n                status: 400\n            });\n        }\n        console.log(`Starting analysis for user: ${username}`);\n        // Set verbose mode\n        if (verbose) {\n            _lib_services_redditApi__WEBPACK_IMPORTED_MODULE_1__.redditApi.setVerbose(true);\n            _lib_services_multiModelPipeline__WEBPACK_IMPORTED_MODULE_2__.multiModelPipeline.setVerbose(true);\n        }\n        // Fetch user data server-side\n        const userData = await _lib_services_redditApi__WEBPACK_IMPORTED_MODULE_1__.redditApi.getFullUserData(username, {\n            maxItems: 5000,\n            maxAge: 365,\n            verbose\n        });\n        if (!userData.user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'User not found'\n            }, {\n                status: 404\n            });\n        }\n        console.log(`User data fetched: ${userData.comments.length} comments, ${userData.posts.length} posts`);\n        // Analyze using pipeline server-side\n        const analysis = await _lib_services_multiModelPipeline__WEBPACK_IMPORTED_MODULE_2__.multiModelPipeline.analyzeUser(userData.comments, userData.posts, username);\n        console.log(`Analysis complete for ${username}`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(analysis);\n    } catch (error) {\n        console.error('Analysis API error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : 'Analysis failed'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9hbmFseXplL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUQ7QUFDSDtBQUNrQjtBQUUvRCxlQUFlRyxLQUFLQyxPQUFvQjtJQUM3QyxJQUFJO1FBQ0YsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsS0FBSyxFQUFFLEdBQUcsTUFBTUYsUUFBUUcsSUFBSTtRQUV4RCxJQUFJLENBQUNGLFVBQVU7WUFDYixPQUFPTCxxREFBWUEsQ0FBQ08sSUFBSSxDQUFDO2dCQUFFQyxPQUFPO1lBQXVCLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUM1RTtRQUVBQyxRQUFRQyxHQUFHLENBQUMsQ0FBQyw0QkFBNEIsRUFBRU4sVUFBVTtRQUVyRCxtQkFBbUI7UUFDbkIsSUFBSUMsU0FBUztZQUNYTCw4REFBU0EsQ0FBQ1csVUFBVSxDQUFDO1lBQ3JCVixnRkFBa0JBLENBQUNVLFVBQVUsQ0FBQztRQUNoQztRQUVBLDhCQUE4QjtRQUM5QixNQUFNQyxXQUFXLE1BQU1aLDhEQUFTQSxDQUFDYSxlQUFlLENBQUNULFVBQVU7WUFDekRVLFVBQVU7WUFDVkMsUUFBUTtZQUNSVjtRQUNGO1FBRUEsSUFBSSxDQUFDTyxTQUFTSSxJQUFJLEVBQUU7WUFDbEIsT0FBT2pCLHFEQUFZQSxDQUFDTyxJQUFJLENBQUM7Z0JBQUVDLE9BQU87WUFBaUIsR0FBRztnQkFBRUMsUUFBUTtZQUFJO1FBQ3RFO1FBRUFDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixFQUFFRSxTQUFTSyxRQUFRLENBQUNDLE1BQU0sQ0FBQyxXQUFXLEVBQUVOLFNBQVNPLEtBQUssQ0FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUVyRyxxQ0FBcUM7UUFDckMsTUFBTUUsV0FBVyxNQUFNbkIsZ0ZBQWtCQSxDQUFDb0IsV0FBVyxDQUNuRFQsU0FBU0ssUUFBUSxFQUNqQkwsU0FBU08sS0FBSyxFQUNkZjtRQUdGSyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxzQkFBc0IsRUFBRU4sVUFBVTtRQUMvQyxPQUFPTCxxREFBWUEsQ0FBQ08sSUFBSSxDQUFDYztJQUUzQixFQUFFLE9BQU9iLE9BQU87UUFDZEUsUUFBUUYsS0FBSyxDQUFDLHVCQUF1QkE7UUFDckMsT0FBT1IscURBQVlBLENBQUNPLElBQUksQ0FDdEI7WUFBRUMsT0FBT0EsaUJBQWlCZSxRQUFRZixNQUFNZ0IsT0FBTyxHQUFHO1FBQWtCLEdBQ3BFO1lBQUVmLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyJEOlxcY29kaW5nXFxsYXVuY2hcXHRob3VnaHRQb2xpY2VcXHNyY1xcYXBwXFxhcGlcXGFuYWx5emVcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcclxuaW1wb3J0IHsgcmVkZGl0QXBpIH0gZnJvbSAnQC9saWIvc2VydmljZXMvcmVkZGl0QXBpJ1xyXG5pbXBvcnQgeyBtdWx0aU1vZGVsUGlwZWxpbmUgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9tdWx0aU1vZGVsUGlwZWxpbmUnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IHVzZXJuYW1lLCB2ZXJib3NlID0gZmFsc2UgfSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXHJcbiAgICBcclxuICAgIGlmICghdXNlcm5hbWUpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdVc2VybmFtZSBpcyByZXF1aXJlZCcgfSwgeyBzdGF0dXM6IDQwMCB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGBTdGFydGluZyBhbmFseXNpcyBmb3IgdXNlcjogJHt1c2VybmFtZX1gKVxyXG4gICAgXHJcbiAgICAvLyBTZXQgdmVyYm9zZSBtb2RlXHJcbiAgICBpZiAodmVyYm9zZSkge1xyXG4gICAgICByZWRkaXRBcGkuc2V0VmVyYm9zZSh0cnVlKVxyXG4gICAgICBtdWx0aU1vZGVsUGlwZWxpbmUuc2V0VmVyYm9zZSh0cnVlKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEZldGNoIHVzZXIgZGF0YSBzZXJ2ZXItc2lkZVxyXG4gICAgY29uc3QgdXNlckRhdGEgPSBhd2FpdCByZWRkaXRBcGkuZ2V0RnVsbFVzZXJEYXRhKHVzZXJuYW1lLCB7XHJcbiAgICAgIG1heEl0ZW1zOiA1MDAwLFxyXG4gICAgICBtYXhBZ2U6IDM2NSxcclxuICAgICAgdmVyYm9zZVxyXG4gICAgfSlcclxuXHJcbiAgICBpZiAoIXVzZXJEYXRhLnVzZXIpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdVc2VyIG5vdCBmb3VuZCcgfSwgeyBzdGF0dXM6IDQwNCB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGBVc2VyIGRhdGEgZmV0Y2hlZDogJHt1c2VyRGF0YS5jb21tZW50cy5sZW5ndGh9IGNvbW1lbnRzLCAke3VzZXJEYXRhLnBvc3RzLmxlbmd0aH0gcG9zdHNgKVxyXG5cclxuICAgIC8vIEFuYWx5emUgdXNpbmcgcGlwZWxpbmUgc2VydmVyLXNpZGVcclxuICAgIGNvbnN0IGFuYWx5c2lzID0gYXdhaXQgbXVsdGlNb2RlbFBpcGVsaW5lLmFuYWx5emVVc2VyKFxyXG4gICAgICB1c2VyRGF0YS5jb21tZW50cyxcclxuICAgICAgdXNlckRhdGEucG9zdHMsXHJcbiAgICAgIHVzZXJuYW1lXHJcbiAgICApXHJcblxyXG4gICAgY29uc29sZS5sb2coYEFuYWx5c2lzIGNvbXBsZXRlIGZvciAke3VzZXJuYW1lfWApXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oYW5hbHlzaXMpXHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdBbmFseXNpcyBBUEkgZXJyb3I6JywgZXJyb3IpXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgIHsgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0FuYWx5c2lzIGZhaWxlZCcgfSxcclxuICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICApXHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsInJlZGRpdEFwaSIsIm11bHRpTW9kZWxQaXBlbGluZSIsIlBPU1QiLCJyZXF1ZXN0IiwidXNlcm5hbWUiLCJ2ZXJib3NlIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiY29uc29sZSIsImxvZyIsInNldFZlcmJvc2UiLCJ1c2VyRGF0YSIsImdldEZ1bGxVc2VyRGF0YSIsIm1heEl0ZW1zIiwibWF4QWdlIiwidXNlciIsImNvbW1lbnRzIiwibGVuZ3RoIiwicG9zdHMiLCJhbmFseXNpcyIsImFuYWx5emVVc2VyIiwiRXJyb3IiLCJtZXNzYWdlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/analyze/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/cacheService.ts":
/*!******************************************!*\
  !*** ./src/lib/services/cacheService.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheService: () => (/* binding */ cacheService)\n/* harmony export */ });\nclass CacheService {\n    constructor(){\n        this.cache = new Map();\n        this.DEFAULT_TTL = 7 * 24 * 60 * 60 * 1000 // 7 days\n        ;\n        this.CACHE_VERSION = '2.0';\n        this.MAX_CACHE_SIZE = 50;\n        this.hits = 0;\n        this.misses = 0;\n        this.isClient = \"undefined\" !== 'undefined';\n        // Only load from storage on client-side\n        if (this.isClient) {\n            this.loadFromStorage();\n            this.setupPeriodicCleanup();\n        }\n    }\n    loadFromStorage() {\n        if (!this.isClient) return;\n        try {\n            const stored = localStorage.getItem('thoughtPoliceCache');\n            if (stored) {\n                const data = JSON.parse(stored);\n                // Validate cache version\n                if (data.version !== this.CACHE_VERSION) {\n                    console.log('Cache version mismatch, clearing cache');\n                    this.clearAll();\n                    return;\n                }\n                // Load entries\n                if (data.entries) {\n                    for (const [key, entry] of Object.entries(data.entries)){\n                        this.cache.set(key, entry);\n                    }\n                }\n                console.log(`Loaded ${this.cache.size} cache entries from storage`);\n                this.cleanupExpired();\n            }\n        } catch (error) {\n            console.warn('Failed to load cache from storage:', error);\n            this.clearAll();\n        }\n    }\n    saveToStorage() {\n        if (!this.isClient) return;\n        const data = {\n            version: this.CACHE_VERSION,\n            entries: Object.fromEntries(this.cache.entries()),\n            lastSaved: Date.now()\n        };\n        try {\n            localStorage.setItem('thoughtPoliceCache', JSON.stringify(data));\n        } catch (error) {\n            console.warn('Failed to save cache to storage:', error);\n            // If storage is full, try to free up space\n            if (error instanceof Error && error.name === 'QuotaExceededError') {\n                this.evictOldest(Math.floor(this.cache.size / 2));\n                try {\n                    localStorage.setItem('thoughtPoliceCache', JSON.stringify(data));\n                } catch  {\n                    console.warn('Cache storage still full after eviction');\n                }\n            }\n        }\n    }\n    setupPeriodicCleanup() {\n        // Clean up expired entries every 10 minutes\n        setInterval(()=>{\n            this.cleanupExpired();\n        }, 10 * 60 * 1000);\n    }\n    generateContentHash(comments, posts) {\n        // Create a hash based on the latest content timestamps\n        const latestComment = comments.length > 0 ? Math.max(...comments.map((c)=>c.created_utc)) : 0;\n        const latestPost = posts.length > 0 ? Math.max(...posts.map((p)=>p.created_utc)) : 0;\n        const latest = Math.max(latestComment, latestPost);\n        // Include content count for additional validation\n        const contentSignature = `${latest}-${comments.length}-${posts.length}`;\n        // Simple hash function\n        let hash = 0;\n        for(let i = 0; i < contentSignature.length; i++){\n            const char = contentSignature.charCodeAt(i);\n            hash = (hash << 5) - hash + char;\n            hash = hash & hash; // Convert to 32-bit integer\n        }\n        return Math.abs(hash).toString(36);\n    }\n    getAnalysisKey(username, contentHash) {\n        return `analysis:${username.toLowerCase()}:${contentHash}`;\n    }\n    evictOldest(count) {\n        const entries = Array.from(this.cache.entries()).sort(([, a], [, b])=>a.timestamp - b.timestamp);\n        for(let i = 0; i < Math.min(count, entries.length); i++){\n            this.cache.delete(entries[i][0]);\n        }\n        console.log(`Evicted ${Math.min(count, entries.length)} oldest cache entries`);\n    }\n    cleanupExpired() {\n        const now = Date.now();\n        let cleanedCount = 0;\n        this.cache.forEach((entry, key)=>{\n            if (now > entry.expiresAt) {\n                this.cache.delete(key);\n                cleanedCount++;\n            }\n        });\n        if (cleanedCount > 0) {\n            console.log(`Cleaned up ${cleanedCount} expired cache entries`);\n            this.saveToStorage();\n        }\n    }\n    setAnalysis(username, data, comments = [], posts = [], ttl = this.DEFAULT_TTL) {\n        const contentHash = this.generateContentHash(comments, posts);\n        const key = this.getAnalysisKey(username, contentHash);\n        const entry = {\n            data,\n            timestamp: Date.now(),\n            expiresAt: Date.now() + ttl,\n            contentHash,\n            version: this.CACHE_VERSION\n        };\n        // Enforce cache size limit\n        if (this.cache.size >= this.MAX_CACHE_SIZE) {\n            this.evictOldest(1);\n        }\n        this.cache.set(key, entry);\n        console.log(`Cached analysis for user: ${username}, hash: ${contentHash}`);\n        this.saveToStorage();\n    }\n    getAnalysis(username, comments = [], posts = []) {\n        const contentHash = this.generateContentHash(comments, posts);\n        const key = this.getAnalysisKey(username, contentHash);\n        const entry = this.cache.get(key);\n        if (!entry) {\n            this.misses++;\n            return null;\n        }\n        if (Date.now() > entry.expiresAt) {\n            this.cache.delete(key);\n            this.misses++;\n            this.saveToStorage();\n            return null;\n        }\n        this.hits++;\n        return entry.data;\n    }\n    hasValidAnalysis(username, comments = [], posts = []) {\n        return this.getAnalysis(username, comments, posts) !== null;\n    }\n    clearAnalysis(username) {\n        const userKeys = Array.from(this.cache.keys()).filter((k)=>k.startsWith(`analysis:${username.toLowerCase()}:`));\n        userKeys.forEach((key)=>this.cache.delete(key));\n        console.log(`Cleared ${userKeys.length} cache entries for user: ${username}`);\n        this.saveToStorage();\n    }\n    clearAll() {\n        this.cache.clear();\n        this.hits = 0;\n        this.misses = 0;\n        console.log('Cleared all cached analyses');\n        this.saveToStorage();\n    }\n    getStats() {\n        const now = Date.now();\n        let validEntries = 0;\n        let expiredEntries = 0;\n        let totalSize = 0;\n        this.cache.forEach((entry)=>{\n            if (now <= entry.expiresAt) {\n                validEntries++;\n            } else {\n                expiredEntries++;\n            }\n            totalSize += JSON.stringify(entry).length;\n        });\n        const totalRequests = this.hits + this.misses;\n        const hitRate = totalRequests > 0 ? this.hits / totalRequests * 100 : 0;\n        return {\n            totalEntries: this.cache.size,\n            validEntries,\n            expiredEntries,\n            totalSize,\n            hitRate\n        };\n    }\n    getDebugInfo() {\n        const now = Date.now();\n        return Array.from(this.cache.entries()).map(([key, entry])=>{\n            const parts = key.split(':');\n            const username = parts[1] || 'unknown';\n            const contentHash = parts[2] || 'unknown';\n            const ageMs = now - entry.timestamp;\n            const age = ageMs < 60000 ? `${Math.round(ageMs / 1000)}s` : ageMs < 3600000 ? `${Math.round(ageMs / 60000)}m` : `${Math.round(ageMs / 3600000)}h`;\n            return {\n                key,\n                username,\n                contentHash,\n                age,\n                size: JSON.stringify(entry).length,\n                isExpired: now > entry.expiresAt\n            };\n        }).sort((a, b)=>a.username.localeCompare(b.username));\n    }\n}\nconst cacheService = new CacheService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/cacheService.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/multiModelPipeline.ts":
/*!************************************************!*\
  !*** ./src/lib/services/multiModelPipeline.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   multiModelPipeline: () => (/* binding */ multiModelPipeline)\n/* harmony export */ });\n/* harmony import */ var _cacheService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cacheService */ \"(rsc)/./src/lib/services/cacheService.ts\");\n/* harmony import */ var _tokenBudget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tokenBudget */ \"(rsc)/./src/lib/services/tokenBudget.ts\");\n\n\nclass MultiModelPipeline {\n    constructor(){\n        this.apiKey = null;\n        this.baseUrl = 'https://openrouter.ai/api/v1/chat/completions';\n        this.isAvailable = false;\n        this.verbose = false;\n        // Optimized model selection - single strong model for summarization\n        this.summarizerModel = 'openrouter/cypher-alpha:free';\n        this.contradictionModel = 'openrouter/cypher-alpha:free';\n        // Fallback to stronger models if budget allows\n        this.premiumSummarizerModel = 'openrouter/cypher-alpha:free';\n        this.premiumContradictionModel = 'openrouter/cypher-alpha:free';\n        try {\n            this.apiKey = process.env.OPENROUTER_API_KEY;\n            if (!this.apiKey) {\n                console.warn('OpenRouter API key not found - using fallback analysis');\n                this.isAvailable = false;\n                return;\n            }\n            this.isAvailable = true;\n            this.debug('Multi-Model Pipeline initialized with optimized models');\n        } catch (error) {\n            console.warn('Failed to initialize Multi-Model Pipeline:', error);\n            this.isAvailable = false;\n        }\n    }\n    setVerbose(verbose) {\n        this.verbose = verbose;\n    }\n    debug(...args) {\n        if (this.verbose) {\n            console.log('[Pipeline]', ...args);\n        }\n    }\n    async analyzeUser(comments, posts, username) {\n        try {\n            this.debug(`Starting optimized pipeline analysis for ${username}: ${comments.length} comments, ${posts.length} posts`);\n            // Check cache first with content validation\n            const cachedResult = _cacheService__WEBPACK_IMPORTED_MODULE_0__.cacheService.getAnalysis(username, comments, posts);\n            if (cachedResult) {\n                this.debug(`Returning cached analysis for ${username}`);\n                return cachedResult;\n            }\n            // Convert and deduplicate all content\n            const allComments = this.convertAndDeduplicateComments(comments, posts);\n            this.debug(`Processing ${allComments.length} unique items (after deduplication)`);\n            if (allComments.length === 0) {\n                return this.createEmptyReport(username);\n            }\n            // Check budget before proceeding\n            const budgetStatus = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getBudgetStatus();\n            if (budgetStatus.isExceeded) {\n                this.debug('Budget exceeded, using fallback analysis');\n                return this.createFallbackReport(allComments, username);\n            }\n            // Optimized 2-stage pipeline: Summarize → Analyze Contradictions\n            const summaries = await this.optimizedSummarization(allComments);\n            this.debug(`Generated ${summaries.length} summaries`);\n            const contradictions = await this.analyzeContradictions(summaries);\n            this.debug(`Found ${contradictions.length} contradictions`);\n            // Generate comprehensive report\n            const report = this.generateReport(allComments, summaries, contradictions, username);\n            // Cache the result with content hash\n            _cacheService__WEBPACK_IMPORTED_MODULE_0__.cacheService.setAnalysis(username, report, comments, posts);\n            return report;\n        } catch (error) {\n            console.error('Multi-model pipeline error:', error);\n            return this.createErrorReport(username, error);\n        }\n    }\n    convertAndDeduplicateComments(comments, posts) {\n        const allItems = [];\n        let idCounter = 1;\n        // Process comments\n        comments.forEach((comment)=>{\n            if (comment.body && comment.body !== '[deleted]' && comment.body !== '[removed]' && comment.body.length > 20) {\n                allItems.push({\n                    id: `ID-${idCounter++}`,\n                    text: comment.body,\n                    date: comment.created_utc,\n                    subreddit: comment.subreddit,\n                    score: comment.score,\n                    permalink: comment.permalink,\n                    type: 'comment',\n                    context: comment.link_title\n                });\n            }\n        });\n        // Process posts\n        posts.forEach((post)=>{\n            if (post.selftext && post.selftext !== '[deleted]' && post.selftext !== '[removed]' && post.selftext.length > 20) {\n                const fullText = `${post.title} ${post.selftext}`.trim();\n                allItems.push({\n                    id: `ID-${idCounter++}`,\n                    text: fullText,\n                    date: post.created_utc,\n                    subreddit: post.subreddit,\n                    score: post.score,\n                    permalink: post.permalink,\n                    type: 'post'\n                });\n            }\n        });\n        // Enhanced deduplication with clustering\n        const deduplicated = this.smartDeduplication(allItems);\n        this.debug(`Deduplicated from ${allItems.length} to ${deduplicated.length} items`);\n        // Sort by date (oldest first) for temporal analysis\n        return deduplicated.sort((a, b)=>a.date - b.date);\n    }\n    smartDeduplication(items) {\n        const clusters = new Map();\n        // Group similar content\n        for (const item of items){\n            const signature = this.createContentSignature(item.text);\n            if (!clusters.has(signature)) {\n                clusters.set(signature, []);\n            }\n            clusters.get(signature).push(item);\n        }\n        // Select best representative from each cluster\n        const deduplicated = [];\n        for (const cluster of clusters.values()){\n            if (cluster.length === 1) {\n                deduplicated.push(cluster[0]);\n            } else {\n                // Choose the highest scored or most recent item from cluster\n                const best = cluster.reduce((best, current)=>{\n                    if (current.score > best.score) return current;\n                    if (current.score === best.score && current.date > best.date) return current;\n                    return best;\n                });\n                deduplicated.push(best);\n            }\n        }\n        return deduplicated;\n    }\n    createContentSignature(text) {\n        // Create a signature for clustering similar content\n        const normalized = text.toLowerCase().replace(/[^\\w\\s]/g, ' ').replace(/\\s+/g, ' ').trim();\n        // Use first 100 characters as signature\n        return normalized.substring(0, 100);\n    }\n    async optimizedSummarization(comments) {\n        if (!this.isAvailable) {\n            return this.createFallbackSummaries(comments);\n        }\n        // Dynamic batch sizing based on token limits\n        const maxTokensPerBatch = 3000; // Conservative limit\n        const batches = this.createDynamicBatches(comments, maxTokensPerBatch);\n        this.debug(`Created ${batches.length} dynamic batches for summarization`);\n        const allSummaries = [];\n        // Choose model based on budget\n        const budgetStatus = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getBudgetStatus();\n        const useModel = budgetStatus.remaining > 1.0 ? this.premiumSummarizerModel : this.summarizerModel;\n        for(let i = 0; i < batches.length; i++){\n            const batch = batches[i];\n            try {\n                this.debug(`Summarizing batch ${i + 1}/${batches.length} with ${useModel} (${batch.length} items)`);\n                // Check if we can afford this request\n                const prompt = this.buildOptimizedSummarizationPrompt(batch);\n                const estimatedTokens = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.estimateTokens(prompt);\n                if (!_tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.canAfford(useModel, estimatedTokens)) {\n                    this.debug('Budget insufficient, switching to fallback');\n                    const fallbackSummaries = this.createFallbackSummaries(batch);\n                    allSummaries.push(...fallbackSummaries);\n                    continue;\n                }\n                const batchSummaries = await this.summarizeBatch(batch, useModel);\n                allSummaries.push(...batchSummaries);\n                // Rate limiting\n                if (i < batches.length - 1) {\n                    await new Promise((resolve)=>setTimeout(resolve, 2000));\n                }\n            } catch (error) {\n                this.debug(`Batch ${i + 1} summarization failed:`, error);\n                const fallbackSummaries = this.createFallbackSummaries(batch);\n                allSummaries.push(...fallbackSummaries);\n            }\n        }\n        return allSummaries;\n    }\n    createDynamicBatches(comments, maxTokensPerBatch) {\n        const batches = [];\n        let currentBatch = [];\n        let currentTokens = 0;\n        for (const comment of comments){\n            const commentTokens = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.estimateTokens(comment.text);\n            // If adding this comment would exceed the limit, start a new batch\n            if (currentTokens + commentTokens > maxTokensPerBatch && currentBatch.length > 0) {\n                batches.push(currentBatch);\n                currentBatch = [\n                    comment\n                ];\n                currentTokens = commentTokens;\n            } else {\n                currentBatch.push(comment);\n                currentTokens += commentTokens;\n            }\n        }\n        // Add the last batch if it has content\n        if (currentBatch.length > 0) {\n            batches.push(currentBatch);\n        }\n        return batches;\n    }\n    buildOptimizedSummarizationPrompt(batch) {\n        const commentsText = batch.map((comment)=>{\n            const dateStr = new Date(comment.date * 1000).toLocaleDateString();\n            return `${comment.id} (r/${comment.subreddit}, ${dateStr}): \"${comment.text.substring(0, 500)}\"`;\n        }).join('\\n\\n');\n        return `You are an expert content analyzer specializing in detecting ideological inconsistencies and opinion changes in social media content.\n\nTASK: Summarize each comment below into a concise statement that preserves:\n- Core beliefs and opinions\n- Emotional tone and intensity  \n- Political/ideological stance\n- Sentiment (positive/negative/neutral)\n\nCRITICAL: Focus on extracting viewpoints that could potentially contradict other statements. Include context clues about the user's stance on topics.\n\nComments to analyze:\n${commentsText}\n\nOUTPUT FORMAT (one line per comment):\nID-X: [Concise summary preserving beliefs, tone, and stance]\n\nEXAMPLES:\nID-32: Strongly supports gun rights, believes self-defense is fundamental (passionate, libertarian stance)\nID-33: Advocates for strict gun control, calls for assault weapon bans (emotional, progressive stance)\nID-34: Dismisses climate change concerns as overblown media hype (skeptical, conservative tone)\n\nAnalyze each comment now:`;\n    }\n    async summarizeBatch(batch, model) {\n        const prompt = this.buildOptimizedSummarizationPrompt(batch);\n        try {\n            const response = await this.makeOpenRouterRequest(model, prompt);\n            return this.parseSummarizationResponse(response, batch);\n        } catch (error) {\n            this.debug(`Summarization failed for model ${model}:`, error);\n            return this.createFallbackSummaries(batch);\n        }\n    }\n    async analyzeContradictions(summaries) {\n        if (!this.isAvailable || summaries.length < 2) {\n            return this.createFallbackContradictions(summaries);\n        }\n        try {\n            this.debug(`Analyzing contradictions from ${summaries.length} summaries`);\n            // Choose model based on budget\n            const budgetStatus = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getBudgetStatus();\n            const useModel = budgetStatus.remaining > 0.5 ? this.premiumContradictionModel : this.contradictionModel;\n            const prompt = this.buildOptimizedContradictionPrompt(summaries);\n            const estimatedTokens = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.estimateTokens(prompt);\n            if (!_tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.canAfford(useModel, estimatedTokens)) {\n                this.debug('Budget insufficient for contradiction analysis, using fallback');\n                return this.createFallbackContradictions(summaries);\n            }\n            const response = await this.makeOpenRouterRequest(useModel, prompt);\n            return this.parseContradictionResponse(response, summaries);\n        } catch (error) {\n            this.debug('Contradiction analysis failed:', error);\n            return this.createFallbackContradictions(summaries);\n        }\n    }\n    buildOptimizedContradictionPrompt(summaries) {\n        const summariesText = summaries.map((s)=>`${s.id}: ${s.summary}`).join('\\n');\n        return `You are an expert at detecting ideological inconsistencies and contradictory viewpoints in user-generated content.\n\nTASK: Identify genuine contradictions between these summarized statements. Focus on:\n- Direct opposing viewpoints on the same topic\n- Ideological flip-flops without reasonable explanation  \n- Contradictory moral or ethical positions\n- Inconsistent political stances\n\nIGNORE:\n- Normal opinion evolution over long periods\n- Different contexts (serious vs casual discussions)\n- Sarcasm vs genuine statements\n- Hypothetical scenarios vs real opinions\n\nSummaries to analyze:\n${summariesText}\n\nOUTPUT FORMAT:\nContradiction between ID-X and ID-Y: [Specific description of the contradiction and why it's significant]\n\nIf no genuine contradictions found, respond with: \"No contradictions detected.\"\n\nAnalyze with high standards for what constitutes a real contradiction:`;\n    }\n    async makeOpenRouterRequest(model, prompt) {\n        if (!this.apiKey) {\n            throw new Error('API key not available');\n        }\n        const inputTokens = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.estimateTokens(prompt);\n        const maxOutputTokens = 1500;\n        const response = await fetch(this.baseUrl, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${this.apiKey}`,\n                'Content-Type': 'application/json',\n                'HTTP-Referer':  false ? 0 : 'http://localhost:3000',\n                'X-Title': 'Thought Police - Optimized Pipeline'\n            },\n            body: JSON.stringify({\n                model,\n                messages: [\n                    {\n                        role: 'user',\n                        content: prompt\n                    }\n                ],\n                temperature: 0.1,\n                max_tokens: maxOutputTokens,\n                top_p: 0.9\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new Error(`OpenRouter API error: ${response.status} ${response.statusText} - ${JSON.stringify(errorData)}`);\n        }\n        const data = await response.json();\n        const responseText = data.choices[0]?.message?.content || '';\n        // Record token usage\n        const outputTokens = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.estimateTokens(responseText);\n        _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.recordUsage(model, inputTokens, outputTokens);\n        return responseText;\n    }\n    parseSummarizationResponse(response, batch) {\n        const summaries = [];\n        const lines = response.split('\\n').filter((line)=>line.trim());\n        for (const line of lines){\n            const match = line.match(/^(ID-\\d+):\\s*(.+)$/);\n            if (match) {\n                const [, id, summary] = match;\n                const originalComment = batch.find((c)=>c.id === id);\n                if (originalComment) {\n                    summaries.push({\n                        id,\n                        summary: summary.trim(),\n                        originalComment\n                    });\n                }\n            }\n        }\n        // Add fallback summaries for missing items\n        const missingComments = batch.filter((comment)=>!summaries.some((summary)=>summary.id === comment.id));\n        if (missingComments.length > 0) {\n            this.debug(`${missingComments.length} summaries missing from AI response, adding fallbacks`);\n            const fallbackSummaries = this.createFallbackSummaries(missingComments);\n            summaries.push(...fallbackSummaries);\n        }\n        return summaries;\n    }\n    parseContradictionResponse(response, summaries) {\n        const contradictions = [];\n        const lines = response.split('\\n').filter((line)=>line.trim());\n        for (const line of lines){\n            const match = line.match(/^Contradiction between (ID-\\d+) and (ID-\\d+):\\s*(.+)$/);\n            if (match) {\n                const [, id1, id2, description] = match;\n                const summary1 = summaries.find((s)=>s.id === id1);\n                const summary2 = summaries.find((s)=>s.id === id2);\n                if (summary1 && summary2) {\n                    const confidence = this.calculateContradictionConfidence(summary1, summary2, description);\n                    contradictions.push({\n                        id1,\n                        id2,\n                        description: description.trim(),\n                        confidence,\n                        category: this.detectCategory(description)\n                    });\n                }\n            }\n        }\n        return contradictions.sort((a, b)=>b.confidence - a.confidence).slice(0, 12); // Limit to most significant\n    }\n    calculateContradictionConfidence(summary1, summary2, description) {\n        let confidence = 80; // Base confidence for AI-detected contradictions\n        // Time-based adjustments\n        const timeDiff = Math.abs(summary2.originalComment.date - summary1.originalComment.date);\n        const daysDiff = timeDiff / (24 * 60 * 60);\n        if (daysDiff < 1) {\n            confidence -= 25; // Same day might be contextual\n        } else if (daysDiff < 7) {\n            confidence -= 15; // Same week might be related\n        } else if (daysDiff > 365) {\n            confidence -= 10; // Very old might be opinion evolution\n        }\n        // Content-based adjustments\n        const strongOpposition = [\n            'completely opposite',\n            'directly contradicts',\n            'total reversal',\n            'flip-flop'\n        ];\n        if (strongOpposition.some((phrase)=>description.toLowerCase().includes(phrase))) {\n            confidence += 15;\n        }\n        // Context adjustments\n        if (summary1.originalComment.subreddit !== summary2.originalComment.subreddit) {\n            const contextualSubs = [\n                'circlejerk',\n                'satire',\n                'jokes',\n                'memes'\n            ];\n            if (contextualSubs.some((sub)=>summary1.originalComment.subreddit.toLowerCase().includes(sub) || summary2.originalComment.subreddit.toLowerCase().includes(sub))) {\n                confidence -= 20; // Likely satirical context\n            } else {\n                confidence -= 5; // Different contexts\n            }\n        }\n        return Math.max(50, Math.min(95, confidence));\n    }\n    createFallbackSummaries(comments) {\n        return comments.map((comment)=>({\n                id: comment.id,\n                summary: this.createEnhancedSummary(comment),\n                originalComment: comment\n            }));\n    }\n    createEnhancedSummary(comment) {\n        const text = comment.text;\n        const truncated = text.length > 200 ? text.substring(0, 200) + '...' : text;\n        const sentiment = this.detectAdvancedSentiment(text);\n        const stance = this.detectStance(text);\n        const intensity = this.detectIntensity(text);\n        return `${truncated} (${sentiment} sentiment, ${stance} stance, ${intensity} intensity)`;\n    }\n    detectAdvancedSentiment(text) {\n        const positive = [\n            'good',\n            'great',\n            'love',\n            'like',\n            'amazing',\n            'awesome',\n            'excellent',\n            'fantastic',\n            'wonderful',\n            'support'\n        ];\n        const negative = [\n            'bad',\n            'hate',\n            'terrible',\n            'awful',\n            'horrible',\n            'worst',\n            'sucks',\n            'disgusting',\n            'pathetic',\n            'oppose'\n        ];\n        const lower = text.toLowerCase();\n        const posCount = positive.filter((word)=>lower.includes(word)).length;\n        const negCount = negative.filter((word)=>lower.includes(word)).length;\n        if (posCount > negCount + 1) return 'positive';\n        if (negCount > posCount + 1) return 'negative';\n        return 'neutral';\n    }\n    detectStance(text) {\n        const lower = text.toLowerCase();\n        if (lower.includes('strongly') || lower.includes('absolutely') || lower.includes('definitely')) return 'strong';\n        if (lower.includes('maybe') || lower.includes('perhaps') || lower.includes('might')) return 'tentative';\n        if (lower.includes('always') || lower.includes('never') || lower.includes('completely')) return 'absolute';\n        return 'moderate';\n    }\n    detectIntensity(text) {\n        const intensifiers = [\n            'very',\n            'extremely',\n            'absolutely',\n            'completely',\n            'totally',\n            'really',\n            'so much'\n        ];\n        const lower = text.toLowerCase();\n        const intensifierCount = intensifiers.filter((word)=>lower.includes(word)).length;\n        if (intensifierCount > 2 || text.includes('!!!') || /[A-Z]{3,}/.test(text)) return 'high';\n        if (intensifierCount > 0 || text.includes('!!')) return 'medium';\n        return 'low';\n    }\n    createFallbackContradictions(summaries) {\n        const contradictions = [];\n        // Enhanced semantic contradiction detection\n        for(let i = 0; i < summaries.length; i++){\n            for(let j = i + 1; j < summaries.length; j++){\n                const summary1 = summaries[i];\n                const summary2 = summaries[j];\n                // Skip if same context and close in time\n                const timeDiff = Math.abs(summary2.originalComment.date - summary1.originalComment.date);\n                const daysDiff = timeDiff / (24 * 60 * 60);\n                if (summary1.originalComment.subreddit === summary2.originalComment.subreddit && daysDiff < 1) {\n                    continue;\n                }\n                const contradictionType = this.detectSemanticContradiction(summary1.summary, summary2.summary);\n                if (contradictionType) {\n                    contradictions.push({\n                        id1: summary1.id,\n                        id2: summary2.id,\n                        description: `${contradictionType.description} (enhanced fallback analysis)`,\n                        confidence: contradictionType.confidence,\n                        category: contradictionType.category\n                    });\n                }\n            }\n        }\n        return contradictions.sort((a, b)=>b.confidence - a.confidence).slice(0, 6);\n    }\n    detectSemanticContradiction(text1, text2) {\n        const lower1 = text1.toLowerCase();\n        const lower2 = text2.toLowerCase();\n        // Enhanced opposition patterns\n        const oppositionPatterns = [\n            {\n                pos: [\n                    'strongly support',\n                    'absolutely love',\n                    'completely agree'\n                ],\n                neg: [\n                    'strongly oppose',\n                    'absolutely hate',\n                    'completely disagree'\n                ],\n                conf: 85,\n                desc: 'Strong opposing positions'\n            },\n            {\n                pos: [\n                    'support',\n                    'favor',\n                    'endorse'\n                ],\n                neg: [\n                    'oppose',\n                    'against',\n                    'reject'\n                ],\n                conf: 75,\n                desc: 'Opposing viewpoints'\n            },\n            {\n                pos: [\n                    'love',\n                    'enjoy',\n                    'like'\n                ],\n                neg: [\n                    'hate',\n                    'despise',\n                    'dislike'\n                ],\n                conf: 70,\n                desc: 'Contradictory preferences'\n            }\n        ];\n        for (const pattern of oppositionPatterns){\n            const hasPos1 = pattern.pos.some((p)=>lower1.includes(p));\n            const hasNeg1 = pattern.neg.some((n)=>lower1.includes(n));\n            const hasPos2 = pattern.pos.some((p)=>lower2.includes(p));\n            const hasNeg2 = pattern.neg.some((n)=>lower2.includes(n));\n            if (hasPos1 && hasNeg2 || hasNeg1 && hasPos2) {\n                return {\n                    description: `${pattern.desc}: conflicting stances detected`,\n                    confidence: pattern.conf,\n                    category: this.detectCategory(text1 + ' ' + text2)\n                };\n            }\n        }\n        return null;\n    }\n    detectCategory(description) {\n        const lower = description.toLowerCase();\n        if (lower.includes('politic') || lower.includes('government') || lower.includes('election') || lower.includes('vote')) return 'political';\n        if (lower.includes('food') || lower.includes('preference') || lower.includes('taste') || lower.includes('like') || lower.includes('love')) return 'personal-preference';\n        if (lower.includes('fact') || lower.includes('truth') || lower.includes('evidence') || lower.includes('science')) return 'factual';\n        if (lower.includes('relationship') || lower.includes('dating') || lower.includes('marriage') || lower.includes('family')) return 'relationship';\n        if (lower.includes('technology') || lower.includes('tech') || lower.includes('software') || lower.includes('computer')) return 'technology';\n        if (lower.includes('entertainment') || lower.includes('movie') || lower.includes('game') || lower.includes('music')) return 'entertainment';\n        if (lower.includes('lifestyle') || lower.includes('health') || lower.includes('fitness') || lower.includes('diet')) return 'lifestyle';\n        return 'opinion';\n    }\n    generateReport(allComments, summaries, contradictions, username) {\n        // Convert contradictions to expected format\n        const formattedContradictions = contradictions.map((c)=>{\n            const comment1 = summaries.find((s)=>s.id === c.id1)?.originalComment;\n            const comment2 = summaries.find((s)=>s.id === c.id2)?.originalComment;\n            return {\n                id: `${c.id1}-${c.id2}`,\n                statement1: comment1?.text.substring(0, 400) || 'Statement not found',\n                statement2: comment2?.text.substring(0, 400) || 'Statement not found',\n                dates: [\n                    new Date((comment1?.date || 0) * 1000).toISOString(),\n                    new Date((comment2?.date || 0) * 1000).toISOString()\n                ],\n                subreddits: [\n                    comment1?.subreddit || 'unknown',\n                    comment2?.subreddit || 'unknown'\n                ],\n                confidenceScore: c.confidence,\n                context: c.description,\n                upvotes: Math.floor(Math.random() * 50) + 10,\n                downvotes: Math.floor(Math.random() * 10),\n                verified: c.confidence > 80,\n                category: c.category,\n                requiresHumanReview: c.confidence < 70\n            };\n        });\n        // Generate timeline\n        const timeline = allComments.slice(-20).map((comment)=>({\n                date: new Date(comment.date * 1000).toISOString(),\n                event: comment.text.substring(0, 100),\n                subreddit: comment.subreddit,\n                score: comment.score\n            }));\n        // Calculate stats\n        const stats = this.calculateStats(allComments);\n        return {\n            summary: this.generateSummary(formattedContradictions, stats, allComments.length, username),\n            contradictions: formattedContradictions,\n            timeline,\n            stats\n        };\n    }\n    calculateStats(comments) {\n        if (comments.length === 0) {\n            return {\n                totalComments: 0,\n                timespan: '0 days',\n                topSubreddits: [],\n                sentimentTrend: 0\n            };\n        }\n        const oldest = Math.min(...comments.map((c)=>c.date));\n        const newest = Math.max(...comments.map((c)=>c.date));\n        const diffDays = Math.floor((newest - oldest) / (24 * 60 * 60));\n        const timespan = diffDays < 30 ? `${diffDays} days` : diffDays < 365 ? `${Math.floor(diffDays / 30)} months` : `${Math.floor(diffDays / 365)} years`;\n        const subredditCounts = {};\n        comments.forEach((comment)=>{\n            subredditCounts[comment.subreddit] = (subredditCounts[comment.subreddit] || 0) + 1;\n        });\n        const topSubreddits = Object.entries(subredditCounts).sort(([, a], [, b])=>b - a).slice(0, 5).map(([subreddit])=>subreddit);\n        return {\n            totalComments: comments.length,\n            timespan,\n            topSubreddits,\n            sentimentTrend: 0\n        };\n    }\n    generateSummary(contradictions, stats, totalComments, username) {\n        const budgetStatus = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getBudgetStatus();\n        const analysisMethod = this.isAvailable && !budgetStatus.isExceeded ? 'AI-powered' : 'Enhanced fallback';\n        if (contradictions.length === 0) {\n            return `${analysisMethod} analysis complete for ${username}. No significant contradictions detected across ${totalComments} statements spanning ${stats.timespan}. User maintains consistent positions across topics and time periods.`;\n        }\n        const highConfidenceCount = contradictions.filter((c)=>c.confidenceScore > 80).length;\n        const humanReviewCount = contradictions.filter((c)=>c.requiresHumanReview).length;\n        let summary = `${analysisMethod} analysis reveals ${contradictions.length} potential contradictions across ${totalComments} statements spanning ${stats.timespan}. `;\n        if (highConfidenceCount > 0) {\n            summary += `${highConfidenceCount} contradictions show high confidence (>80%). `;\n        }\n        if (humanReviewCount > 0) {\n            summary += `${humanReviewCount} findings require human review due to context complexity. `;\n        }\n        if (this.isAvailable) {\n            summary += `Analysis used optimized 2-stage pipeline with budget-aware model selection.`;\n        } else {\n            summary += `Analysis used enhanced semantic detection with local processing.`;\n        }\n        return summary;\n    }\n    createEmptyReport(username) {\n        return {\n            summary: `No content available for analysis for user ${username}.`,\n            contradictions: [],\n            timeline: [],\n            stats: {\n                totalComments: 0,\n                timespan: '0 days',\n                topSubreddits: [],\n                sentimentTrend: 0\n            }\n        };\n    }\n    createErrorReport(username, error) {\n        return {\n            summary: `Analysis failed for ${username}: ${error instanceof Error ? error.message : 'Unknown error occurred'}`,\n            contradictions: [],\n            timeline: [],\n            stats: {\n                totalComments: 0,\n                timespan: '0 days',\n                topSubreddits: [],\n                sentimentTrend: 0\n            }\n        };\n    }\n    createFallbackReport(comments, username) {\n        const summaries = this.createFallbackSummaries(comments);\n        const contradictions = this.createFallbackContradictions(summaries);\n        return this.generateReport(comments, summaries, contradictions, username);\n    }\n}\nconst multiModelPipeline = new MultiModelPipeline();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/multiModelPipeline.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/redditApi.ts":
/*!***************************************!*\
  !*** ./src/lib/services/redditApi.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redditApi: () => (/* binding */ redditApi)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios-retry */ \"(rsc)/./node_modules/axios-retry/dist/esm/index.js\");\n\n\nclass RedditApiService {\n    constructor(){\n        this.baseUrl = 'https://www.reddit.com';\n        this.verbose = false;\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n            timeout: 30000\n        });\n        // Enhanced retry configuration\n        (0,axios_retry__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.axiosInstance, {\n            retries: 3,\n            retryDelay: axios_retry__WEBPACK_IMPORTED_MODULE_0__[\"default\"].exponentialDelay,\n            retryCondition: (error)=>{\n                return axios_retry__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNetworkOrIdempotentRequestError(error) || error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ECONNABORTED' || error.message.includes('socket hang up') || error.response?.status === 503 || // Reddit overload\n                error.response?.status === 502 || // Bad gateway\n                error.response?.status === 504; // Gateway timeout\n            },\n            onRetry: (retryCount, error, requestConfig)=>{\n                if (this.verbose) {\n                    console.log(`Retrying request (attempt ${retryCount}):`, requestConfig.url);\n                }\n            }\n        });\n    }\n    setVerbose(verbose) {\n        this.verbose = verbose;\n    }\n    debug(...args) {\n        if (this.verbose) {\n            console.log('[RedditAPI]', ...args);\n        }\n    }\n    async makeRequest(url, source = 'reddit') {\n        try {\n            this.debug('Making request to:', url);\n            const response = await this.axiosInstance.get(url);\n            this.debug('Request successful:', {\n                url,\n                status: response.status\n            });\n            return response.data;\n        } catch (error) {\n            this.debug('Request failed:', {\n                url,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            if (axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(error)) {\n                if (error.response?.status === 404) {\n                    throw new Error('User not found');\n                } else if (error.response?.status === 429) {\n                    throw new Error('Rate limit exceeded. Please try again later.');\n                } else if (error.response?.status === 503) {\n                    throw new Error('Service temporarily unavailable. Please try again later.');\n                } else if (error.response?.status && error.response.status >= 500) {\n                    throw new Error(`Server error occurred (${error.response.status}). Please try again.`);\n                } else if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n                    throw new Error('Request timeout. Please try again.');\n                }\n            }\n            throw new Error(`Failed to fetch data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    delay(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    // Streaming iterator for Reddit comments (Reddit API only)\n    async *iterateComments(username, options = {}) {\n        const { maxItems = 10000, maxAge = 365 } = options;\n        let totalFetched = 0;\n        let after = null;\n        let before = null;\n        const cutoffDate = Date.now() / 1000 - maxAge * 24 * 60 * 60;\n        this.debug(`Starting Reddit comment iteration for ${username}, max: ${maxItems}, maxAge: ${maxAge} days`);\n        // Use Reddit official API only\n        let requestCount = 0;\n        const maxRequests = 50; // Limit to prevent infinite loops\n        while(totalFetched < maxItems && requestCount < maxRequests){\n            try {\n                let url = `${this.baseUrl}/user/${username}/comments.json?limit=100&sort=new`;\n                if (after) {\n                    url += `&after=${after}`;\n                }\n                if (before) {\n                    url += `&before=${before}`;\n                }\n                const data = await this.makeRequest(url, 'reddit');\n                if (!data.data || !data.data.children || data.data.children.length === 0) {\n                    this.debug('No more comments from Reddit API');\n                    break;\n                }\n                const batch = data.data.children.map((child)=>child.data).filter((comment)=>{\n                    return comment.body && comment.body !== '[deleted]' && comment.body !== '[removed]' && comment.body.length > 20 && comment.created_utc >= cutoffDate;\n                }).map((comment)=>({\n                        id: comment.id,\n                        body: comment.body,\n                        created_utc: comment.created_utc,\n                        subreddit: comment.subreddit,\n                        score: comment.score,\n                        permalink: comment.permalink,\n                        author: comment.author,\n                        link_title: comment.link_title\n                    }));\n                if (batch.length > 0) {\n                    yield batch;\n                    totalFetched += batch.length;\n                    this.debug(`Reddit batch yielded: ${batch.length}, total: ${totalFetched}`);\n                }\n                // Update pagination\n                after = data.data.after;\n                before = data.data.before;\n                if (!after && !before) {\n                    this.debug('Reddit pagination complete - no more pages');\n                    break;\n                }\n                requestCount++;\n                await this.delay(1000); // Rate limiting\n            } catch (error) {\n                this.debug('Reddit API error:', error instanceof Error ? error.message : 'Unknown error');\n                break;\n            }\n        }\n        this.debug(`Comment iteration complete: ${totalFetched} total comments, ${requestCount} requests made`);\n    }\n    // Streaming iterator for posts\n    async *iteratePosts(username, options = {}) {\n        const { maxItems = 2000, maxAge = 365 } = options;\n        let totalFetched = 0;\n        let after = null;\n        const cutoffDate = Date.now() / 1000 - maxAge * 24 * 60 * 60;\n        this.debug(`Starting Reddit post iteration for ${username}, max: ${maxItems}`);\n        let requestCount = 0;\n        const maxRequests = 20; // Posts are typically less numerous\n        while(totalFetched < maxItems && requestCount < maxRequests){\n            try {\n                let url = `${this.baseUrl}/user/${username}/submitted.json?limit=100&sort=new`;\n                if (after) {\n                    url += `&after=${after}`;\n                }\n                const data = await this.makeRequest(url, 'reddit');\n                if (!data.data || !data.data.children || data.data.children.length === 0) {\n                    this.debug('No more posts from Reddit API');\n                    break;\n                }\n                const batch = data.data.children.map((child)=>child.data).filter((post)=>{\n                    return post.selftext && post.selftext !== '[deleted]' && post.selftext !== '[removed]' && post.selftext.length > 20 && post.created_utc >= cutoffDate;\n                }).map((post)=>({\n                        id: post.id,\n                        title: post.title,\n                        selftext: post.selftext,\n                        created_utc: post.created_utc,\n                        subreddit: post.subreddit,\n                        score: post.score,\n                        permalink: post.permalink,\n                        author: post.author,\n                        num_comments: post.num_comments\n                    }));\n                if (batch.length > 0) {\n                    yield batch;\n                    totalFetched += batch.length;\n                    this.debug(`Reddit post batch yielded: ${batch.length}, total: ${totalFetched}`);\n                }\n                after = data.data.after;\n                if (!after) {\n                    this.debug('Reddit post pagination complete');\n                    break;\n                }\n                requestCount++;\n                await this.delay(1000);\n            } catch (error) {\n                this.debug('Posts API error:', error instanceof Error ? error.message : 'Unknown error');\n                break;\n            }\n        }\n        this.debug(`Post iteration complete: ${totalFetched} total posts, ${requestCount} requests made`);\n    }\n    // User info method\n    async getUserInfo(username) {\n        const url = `${this.baseUrl}/user/${username}/about.json`;\n        this.debug('Fetching user info for:', username);\n        const data = await this.makeRequest(url, 'reddit');\n        if (!data.data) {\n            throw new Error('User not found');\n        }\n        return {\n            name: data.data.name,\n            created_utc: data.data.created_utc,\n            comment_karma: data.data.comment_karma,\n            link_karma: data.data.link_karma,\n            total_karma: data.data.total_karma,\n            verified: data.data.verified,\n            is_gold: data.data.is_gold,\n            is_mod: data.data.is_mod\n        };\n    }\n    // Legacy method for compatibility\n    async getUserComments(username, maxComments = 5000) {\n        const comments = [];\n        for await (const batch of this.iterateComments(username, {\n            maxItems: maxComments\n        })){\n            comments.push(...batch);\n            if (comments.length >= maxComments) break;\n        }\n        return comments.slice(0, maxComments);\n    }\n    // Legacy method for compatibility\n    async getUserPosts(username, maxPosts = 2000) {\n        const posts = [];\n        for await (const batch of this.iteratePosts(username, {\n            maxItems: maxPosts\n        })){\n            posts.push(...batch);\n            if (posts.length >= maxPosts) break;\n        }\n        return posts.slice(0, maxPosts);\n    }\n    // Get full user data\n    async getFullUserData(username, options = {}) {\n        try {\n            this.debug('Fetching comprehensive user data for:', username);\n            // Fetch user info first\n            const user = await this.getUserInfo(username);\n            // Stream all content\n            const comments = [];\n            const posts = [];\n            // Collect comments\n            for await (const batch of this.iterateComments(username, options)){\n                comments.push(...batch);\n                if (comments.length >= (options.maxItems || 5000)) break;\n            }\n            // Collect posts\n            for await (const batch of this.iteratePosts(username, options)){\n                posts.push(...batch);\n                if (posts.length >= 1000) break;\n            }\n            this.debug('Comprehensive data complete:', {\n                username,\n                comments: comments.length,\n                posts: posts.length,\n                totalContent: comments.length + posts.length\n            });\n            return {\n                user,\n                comments,\n                posts\n            };\n        } catch (error) {\n            this.debug('Failed to fetch comprehensive user data:', error instanceof Error ? error.message : 'Unknown error');\n            throw error;\n        }\n    }\n    // Get user preview\n    async getUserPreview(username) {\n        try {\n            const user = await this.getUserInfo(username);\n            // Get a small sample to check for recent activity\n            const sampleComments = [];\n            let batchCount = 0;\n            for await (const batch of this.iterateComments(username, {\n                maxItems: 20\n            })){\n                sampleComments.push(...batch);\n                batchCount++;\n                if (batchCount >= 1) break; // Just first batch for preview\n            }\n            const accountAge = Math.floor((Date.now() / 1000 - user.created_utc) / (24 * 60 * 60));\n            const ageString = accountAge < 30 ? `${accountAge} days` : accountAge < 365 ? `${Math.floor(accountAge / 30)} months` : `${Math.floor(accountAge / 365)} years`;\n            // Better estimation based on karma and account age\n            const dailyKarma = user.comment_karma / Math.max(accountAge, 1);\n            const estimatedComments = Math.min(Math.max(dailyKarma * 2, 100), 8000);\n            return {\n                exists: true,\n                karma: user.total_karma,\n                accountAge: ageString,\n                recentActivity: sampleComments.length > 0,\n                estimatedComments: Math.floor(estimatedComments)\n            };\n        } catch  {\n            return {\n                exists: false,\n                karma: 0,\n                accountAge: 'Unknown',\n                recentActivity: false,\n                estimatedComments: 0\n            };\n        }\n    }\n    // Check if user exists\n    async userExists(username) {\n        try {\n            await this.getUserInfo(username);\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    // Get subreddit info (bonus method)\n    async getSubredditInfo(subreddit) {\n        try {\n            const url = `${this.baseUrl}/r/${subreddit}/about.json`;\n            const data = await this.makeRequest(url, 'reddit');\n            return data.data;\n        } catch (error) {\n            this.debug('Failed to fetch subreddit info:', error);\n            throw error;\n        }\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            const response = await this.axiosInstance.get(`${this.baseUrl}/r/test.json`, {\n                timeout: 5000\n            });\n            return response.status === 200;\n        } catch  {\n            return false;\n        }\n    }\n}\nconst redditApi = new RedditApiService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/redditApi.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/tokenBudget.ts":
/*!*****************************************!*\
  !*** ./src/lib/services/tokenBudget.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tokenBudget: () => (/* binding */ tokenBudget)\n/* harmony export */ });\nclass TokenBudgetService {\n    constructor(config = {\n        maxDollar: 5.00,\n        warningThreshold: 80\n    }){\n        this.usage = [];\n        this.modelPricing = {\n            // Free models (estimated costs for tracking)\n            'mistralai/mistral-7b-instruct:free': {\n                inputTokens: 0,\n                outputTokens: 0\n            },\n            'mistralai/mistral-small-3.2-24b-instruct:free': {\n                inputTokens: 0,\n                outputTokens: 0\n            },\n            'google/gemma-7b-it:free': {\n                inputTokens: 0,\n                outputTokens: 0\n            },\n            'deepseek/deepseek-llm-7b-instruct:free': {\n                inputTokens: 0,\n                outputTokens: 0\n            },\n            'openchat/openchat-3.5-1210:free': {\n                inputTokens: 0,\n                outputTokens: 0\n            },\n            // Paid models (actual pricing)\n            'openai/gpt-4o': {\n                inputTokens: 2.50,\n                outputTokens: 10.00\n            },\n            'openai/gpt-4o-mini': {\n                inputTokens: 0.15,\n                outputTokens: 0.60\n            },\n            'anthropic/claude-3.5-sonnet': {\n                inputTokens: 3.00,\n                outputTokens: 15.00\n            },\n            'google/gemini-pro-1.5': {\n                inputTokens: 1.25,\n                outputTokens: 5.00\n            },\n            'mistralai/mixtral-8x7b-instruct': {\n                inputTokens: 0.24,\n                outputTokens: 0.24\n            }\n        };\n        this.budget = config;\n        this.loadUsageFromStorage();\n    }\n    loadUsageFromStorage() {\n        try {\n            const stored = localStorage.getItem('tokenBudgetUsage');\n            if (stored) {\n                this.usage = JSON.parse(stored);\n                // Clean up old usage (older than 24 hours)\n                const cutoff = Date.now() - 24 * 60 * 60 * 1000;\n                this.usage = this.usage.filter((u)=>u.timestamp > cutoff);\n            }\n        } catch (error) {\n            console.warn('Failed to load token budget usage:', error);\n            this.usage = [];\n        }\n    }\n    saveUsageToStorage() {\n        try {\n            localStorage.setItem('tokenBudgetUsage', JSON.stringify(this.usage));\n        } catch (error) {\n            console.warn('Failed to save token budget usage:', error);\n        }\n    }\n    estimateTokens(text) {\n        // Rough estimation: ~4 characters per token for English text\n        // More accurate would be to use tiktoken, but this is good enough\n        return Math.ceil(text.length / 4);\n    }\n    getCurrentSpend() {\n        return this.usage.reduce((total, usage)=>total + usage.cost, 0);\n    }\n    getRemainingBudget() {\n        return Math.max(0, this.budget.maxDollar - this.getCurrentSpend());\n    }\n    getBudgetStatus() {\n        const spent = this.getCurrentSpend();\n        const remaining = this.getRemainingBudget();\n        const percentage = spent / this.budget.maxDollar * 100;\n        return {\n            spent,\n            remaining,\n            percentage,\n            isWarning: percentage >= this.budget.warningThreshold,\n            isExceeded: spent >= this.budget.maxDollar\n        };\n    }\n    canAfford(model, estimatedInputTokens, estimatedOutputTokens = 500) {\n        const cost = this.calculateCost(model, estimatedInputTokens, estimatedOutputTokens);\n        return this.getRemainingBudget() >= cost;\n    }\n    calculateCost(model, inputTokens, outputTokens) {\n        const pricing = this.modelPricing[model];\n        if (!pricing) {\n            console.warn(`No pricing info for model: ${model}, assuming free`);\n            return 0;\n        }\n        const inputCost = inputTokens / 1000000 * pricing.inputTokens;\n        const outputCost = outputTokens / 1000000 * pricing.outputTokens;\n        return inputCost + outputCost;\n    }\n    recordUsage(model, inputTokens, outputTokens) {\n        const cost = this.calculateCost(model, inputTokens, outputTokens);\n        const usage = {\n            model,\n            inputTokens,\n            outputTokens,\n            cost,\n            timestamp: Date.now()\n        };\n        this.usage.push(usage);\n        this.saveUsageToStorage();\n        console.log(`Token usage recorded:`, {\n            model,\n            inputTokens,\n            outputTokens,\n            cost: cost.toFixed(4),\n            totalSpent: this.getCurrentSpend().toFixed(4),\n            remaining: this.getRemainingBudget().toFixed(4)\n        });\n    }\n    getUsageStats() {\n        const modelBreakdown = {};\n        let totalRequests = 0;\n        let totalInputTokens = 0;\n        let totalOutputTokens = 0;\n        let totalCost = 0;\n        for (const usage of this.usage){\n            totalRequests++;\n            totalInputTokens += usage.inputTokens;\n            totalOutputTokens += usage.outputTokens;\n            totalCost += usage.cost;\n            if (!modelBreakdown[usage.model]) {\n                modelBreakdown[usage.model] = {\n                    requests: 0,\n                    cost: 0,\n                    tokens: 0\n                };\n            }\n            modelBreakdown[usage.model].requests++;\n            modelBreakdown[usage.model].cost += usage.cost;\n            modelBreakdown[usage.model].tokens += usage.inputTokens + usage.outputTokens;\n        }\n        return {\n            totalRequests,\n            totalInputTokens,\n            totalOutputTokens,\n            totalCost,\n            modelBreakdown\n        };\n    }\n    resetBudget() {\n        this.usage = [];\n        this.saveUsageToStorage();\n    }\n    setBudget(config) {\n        this.budget = {\n            ...this.budget,\n            ...config\n        };\n    }\n}\nconst tokenBudget = new TokenBudgetService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3NlcnZpY2VzL3Rva2VuQnVkZ2V0LnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFrQkEsTUFBTUE7SUFtQkpDLFlBQVlDLFNBQXVCO1FBQUVDLFdBQVc7UUFBTUMsa0JBQWtCO0lBQUcsQ0FBQyxDQUFFO2FBakJ0RUMsUUFBdUIsRUFBRTthQUN6QkMsZUFBNkM7WUFDbkQsNkNBQTZDO1lBQzdDLHNDQUFzQztnQkFBRUMsYUFBYTtnQkFBR0MsY0FBYztZQUFFO1lBQ3hFLGlEQUFpRDtnQkFBRUQsYUFBYTtnQkFBR0MsY0FBYztZQUFFO1lBQ25GLDJCQUEyQjtnQkFBRUQsYUFBYTtnQkFBR0MsY0FBYztZQUFFO1lBQzdELDBDQUEwQztnQkFBRUQsYUFBYTtnQkFBR0MsY0FBYztZQUFFO1lBQzVFLG1DQUFtQztnQkFBRUQsYUFBYTtnQkFBR0MsY0FBYztZQUFFO1lBRXJFLCtCQUErQjtZQUMvQixpQkFBaUI7Z0JBQUVELGFBQWE7Z0JBQU1DLGNBQWM7WUFBTTtZQUMxRCxzQkFBc0I7Z0JBQUVELGFBQWE7Z0JBQU1DLGNBQWM7WUFBSztZQUM5RCwrQkFBK0I7Z0JBQUVELGFBQWE7Z0JBQU1DLGNBQWM7WUFBTTtZQUN4RSx5QkFBeUI7Z0JBQUVELGFBQWE7Z0JBQU1DLGNBQWM7WUFBSztZQUNqRSxtQ0FBbUM7Z0JBQUVELGFBQWE7Z0JBQU1DLGNBQWM7WUFBSztRQUM3RTtRQUdFLElBQUksQ0FBQ0MsTUFBTSxHQUFHUDtRQUNkLElBQUksQ0FBQ1Esb0JBQW9CO0lBQzNCO0lBRVFBLHVCQUF1QjtRQUM3QixJQUFJO1lBQ0YsTUFBTUMsU0FBU0MsYUFBYUMsT0FBTyxDQUFDO1lBQ3BDLElBQUlGLFFBQVE7Z0JBQ1YsSUFBSSxDQUFDTixLQUFLLEdBQUdTLEtBQUtDLEtBQUssQ0FBQ0o7Z0JBQ3hCLDJDQUEyQztnQkFDM0MsTUFBTUssU0FBU0MsS0FBS0MsR0FBRyxLQUFNLEtBQUssS0FBSyxLQUFLO2dCQUM1QyxJQUFJLENBQUNiLEtBQUssR0FBRyxJQUFJLENBQUNBLEtBQUssQ0FBQ2MsTUFBTSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxTQUFTLEdBQUdMO1lBQ3BEO1FBQ0YsRUFBRSxPQUFPTSxPQUFPO1lBQ2RDLFFBQVFDLElBQUksQ0FBQyxzQ0FBc0NGO1lBQ25ELElBQUksQ0FBQ2pCLEtBQUssR0FBRyxFQUFFO1FBQ2pCO0lBQ0Y7SUFFUW9CLHFCQUFxQjtRQUMzQixJQUFJO1lBQ0ZiLGFBQWFjLE9BQU8sQ0FBQyxvQkFBb0JaLEtBQUthLFNBQVMsQ0FBQyxJQUFJLENBQUN0QixLQUFLO1FBQ3BFLEVBQUUsT0FBT2lCLE9BQU87WUFDZEMsUUFBUUMsSUFBSSxDQUFDLHNDQUFzQ0Y7UUFDckQ7SUFDRjtJQUVBTSxlQUFlQyxJQUFZLEVBQVU7UUFDbkMsNkRBQTZEO1FBQzdELGtFQUFrRTtRQUNsRSxPQUFPQyxLQUFLQyxJQUFJLENBQUNGLEtBQUtHLE1BQU0sR0FBRztJQUNqQztJQUVBQyxrQkFBMEI7UUFDeEIsT0FBTyxJQUFJLENBQUM1QixLQUFLLENBQUM2QixNQUFNLENBQUMsQ0FBQ0MsT0FBTzlCLFFBQVU4QixRQUFROUIsTUFBTStCLElBQUksRUFBRTtJQUNqRTtJQUVBQyxxQkFBNkI7UUFDM0IsT0FBT1AsS0FBS1EsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDN0IsTUFBTSxDQUFDTixTQUFTLEdBQUcsSUFBSSxDQUFDOEIsZUFBZTtJQUNqRTtJQUVBTSxrQkFNRTtRQUNBLE1BQU1DLFFBQVEsSUFBSSxDQUFDUCxlQUFlO1FBQ2xDLE1BQU1RLFlBQVksSUFBSSxDQUFDSixrQkFBa0I7UUFDekMsTUFBTUssYUFBYSxRQUFTLElBQUksQ0FBQ2pDLE1BQU0sQ0FBQ04sU0FBUyxHQUFJO1FBRXJELE9BQU87WUFDTHFDO1lBQ0FDO1lBQ0FDO1lBQ0FDLFdBQVdELGNBQWMsSUFBSSxDQUFDakMsTUFBTSxDQUFDTCxnQkFBZ0I7WUFDckR3QyxZQUFZSixTQUFTLElBQUksQ0FBQy9CLE1BQU0sQ0FBQ04sU0FBUztRQUM1QztJQUNGO0lBRUEwQyxVQUFVQyxLQUFhLEVBQUVDLG9CQUE0QixFQUFFQyx3QkFBZ0MsR0FBRyxFQUFXO1FBQ25HLE1BQU1aLE9BQU8sSUFBSSxDQUFDYSxhQUFhLENBQUNILE9BQU9DLHNCQUFzQkM7UUFDN0QsT0FBTyxJQUFJLENBQUNYLGtCQUFrQixNQUFNRDtJQUN0QztJQUVBYSxjQUFjSCxLQUFhLEVBQUV2QyxXQUFtQixFQUFFQyxZQUFvQixFQUFVO1FBQzlFLE1BQU0wQyxVQUFVLElBQUksQ0FBQzVDLFlBQVksQ0FBQ3dDLE1BQU07UUFDeEMsSUFBSSxDQUFDSSxTQUFTO1lBQ1ozQixRQUFRQyxJQUFJLENBQUMsQ0FBQywyQkFBMkIsRUFBRXNCLE1BQU0sZUFBZSxDQUFDO1lBQ2pFLE9BQU87UUFDVDtRQUVBLE1BQU1LLFlBQVksY0FBZSxVQUFhRCxRQUFRM0MsV0FBVztRQUNqRSxNQUFNNkMsYUFBYSxlQUFnQixVQUFhRixRQUFRMUMsWUFBWTtRQUVwRSxPQUFPMkMsWUFBWUM7SUFDckI7SUFFQUMsWUFBWVAsS0FBYSxFQUFFdkMsV0FBbUIsRUFBRUMsWUFBb0IsRUFBUTtRQUMxRSxNQUFNNEIsT0FBTyxJQUFJLENBQUNhLGFBQWEsQ0FBQ0gsT0FBT3ZDLGFBQWFDO1FBRXBELE1BQU1ILFFBQXFCO1lBQ3pCeUM7WUFDQXZDO1lBQ0FDO1lBQ0E0QjtZQUNBZixXQUFXSixLQUFLQyxHQUFHO1FBQ3JCO1FBRUEsSUFBSSxDQUFDYixLQUFLLENBQUNpRCxJQUFJLENBQUNqRDtRQUNoQixJQUFJLENBQUNvQixrQkFBa0I7UUFFdkJGLFFBQVFnQyxHQUFHLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO1lBQ25DVDtZQUNBdkM7WUFDQUM7WUFDQTRCLE1BQU1BLEtBQUtvQixPQUFPLENBQUM7WUFDbkJDLFlBQVksSUFBSSxDQUFDeEIsZUFBZSxHQUFHdUIsT0FBTyxDQUFDO1lBQzNDZixXQUFXLElBQUksQ0FBQ0osa0JBQWtCLEdBQUdtQixPQUFPLENBQUM7UUFDL0M7SUFDRjtJQUVBRSxnQkFNRTtRQUNBLE1BQU1DLGlCQUFxRixDQUFDO1FBRTVGLElBQUlDLGdCQUFnQjtRQUNwQixJQUFJQyxtQkFBbUI7UUFDdkIsSUFBSUMsb0JBQW9CO1FBQ3hCLElBQUlDLFlBQVk7UUFFaEIsS0FBSyxNQUFNMUQsU0FBUyxJQUFJLENBQUNBLEtBQUssQ0FBRTtZQUM5QnVEO1lBQ0FDLG9CQUFvQnhELE1BQU1FLFdBQVc7WUFDckN1RCxxQkFBcUJ6RCxNQUFNRyxZQUFZO1lBQ3ZDdUQsYUFBYTFELE1BQU0rQixJQUFJO1lBRXZCLElBQUksQ0FBQ3VCLGNBQWMsQ0FBQ3RELE1BQU15QyxLQUFLLENBQUMsRUFBRTtnQkFDaENhLGNBQWMsQ0FBQ3RELE1BQU15QyxLQUFLLENBQUMsR0FBRztvQkFBRWtCLFVBQVU7b0JBQUc1QixNQUFNO29CQUFHNkIsUUFBUTtnQkFBRTtZQUNsRTtZQUVBTixjQUFjLENBQUN0RCxNQUFNeUMsS0FBSyxDQUFDLENBQUNrQixRQUFRO1lBQ3BDTCxjQUFjLENBQUN0RCxNQUFNeUMsS0FBSyxDQUFDLENBQUNWLElBQUksSUFBSS9CLE1BQU0rQixJQUFJO1lBQzlDdUIsY0FBYyxDQUFDdEQsTUFBTXlDLEtBQUssQ0FBQyxDQUFDbUIsTUFBTSxJQUFJNUQsTUFBTUUsV0FBVyxHQUFHRixNQUFNRyxZQUFZO1FBQzlFO1FBRUEsT0FBTztZQUNMb0Q7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUo7UUFDRjtJQUNGO0lBRUFPLGNBQW9CO1FBQ2xCLElBQUksQ0FBQzdELEtBQUssR0FBRyxFQUFFO1FBQ2YsSUFBSSxDQUFDb0Isa0JBQWtCO0lBQ3pCO0lBRUEwQyxVQUFVakUsTUFBNkIsRUFBUTtRQUM3QyxJQUFJLENBQUNPLE1BQU0sR0FBRztZQUFFLEdBQUcsSUFBSSxDQUFDQSxNQUFNO1lBQUUsR0FBR1AsTUFBTTtRQUFDO0lBQzVDO0FBQ0Y7QUFFTyxNQUFNa0UsY0FBYyxJQUFJcEUscUJBQXFCIiwic291cmNlcyI6WyJEOlxcY29kaW5nXFxsYXVuY2hcXHRob3VnaHRQb2xpY2VcXHNyY1xcbGliXFxzZXJ2aWNlc1xcdG9rZW5CdWRnZXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIE1vZGVsUHJpY2luZyB7XHJcbiAgaW5wdXRUb2tlbnM6IG51bWJlcjsgIC8vIHBlciAxTSB0b2tlbnNcclxuICBvdXRwdXRUb2tlbnM6IG51bWJlcjsgLy8gcGVyIDFNIHRva2Vuc1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQnVkZ2V0Q29uZmlnIHtcclxuICBtYXhEb2xsYXI6IG51bWJlcjtcclxuICB3YXJuaW5nVGhyZXNob2xkOiBudW1iZXI7IC8vIHBlcmNlbnRhZ2UgKGUuZy4sIDgwIGZvciA4MCUpXHJcbn1cclxuXHJcbmludGVyZmFjZSBCdWRnZXRVc2FnZSB7XHJcbiAgbW9kZWw6IHN0cmluZztcclxuICBpbnB1dFRva2VuczogbnVtYmVyO1xyXG4gIG91dHB1dFRva2VuczogbnVtYmVyO1xyXG4gIGNvc3Q6IG51bWJlcjtcclxuICB0aW1lc3RhbXA6IG51bWJlcjtcclxufVxyXG5cclxuY2xhc3MgVG9rZW5CdWRnZXRTZXJ2aWNlIHtcclxuICBwcml2YXRlIGJ1ZGdldDogQnVkZ2V0Q29uZmlnO1xyXG4gIHByaXZhdGUgdXNhZ2U6IEJ1ZGdldFVzYWdlW10gPSBbXTtcclxuICBwcml2YXRlIG1vZGVsUHJpY2luZzogUmVjb3JkPHN0cmluZywgTW9kZWxQcmljaW5nPiA9IHtcclxuICAgIC8vIEZyZWUgbW9kZWxzIChlc3RpbWF0ZWQgY29zdHMgZm9yIHRyYWNraW5nKVxyXG4gICAgJ21pc3RyYWxhaS9taXN0cmFsLTdiLWluc3RydWN0OmZyZWUnOiB7IGlucHV0VG9rZW5zOiAwLCBvdXRwdXRUb2tlbnM6IDAgfSxcclxuICAgICdtaXN0cmFsYWkvbWlzdHJhbC1zbWFsbC0zLjItMjRiLWluc3RydWN0OmZyZWUnOiB7IGlucHV0VG9rZW5zOiAwLCBvdXRwdXRUb2tlbnM6IDAgfSxcclxuICAgICdnb29nbGUvZ2VtbWEtN2ItaXQ6ZnJlZSc6IHsgaW5wdXRUb2tlbnM6IDAsIG91dHB1dFRva2VuczogMCB9LFxyXG4gICAgJ2RlZXBzZWVrL2RlZXBzZWVrLWxsbS03Yi1pbnN0cnVjdDpmcmVlJzogeyBpbnB1dFRva2VuczogMCwgb3V0cHV0VG9rZW5zOiAwIH0sXHJcbiAgICAnb3BlbmNoYXQvb3BlbmNoYXQtMy41LTEyMTA6ZnJlZSc6IHsgaW5wdXRUb2tlbnM6IDAsIG91dHB1dFRva2VuczogMCB9LFxyXG4gICAgXHJcbiAgICAvLyBQYWlkIG1vZGVscyAoYWN0dWFsIHByaWNpbmcpXHJcbiAgICAnb3BlbmFpL2dwdC00byc6IHsgaW5wdXRUb2tlbnM6IDIuNTAsIG91dHB1dFRva2VuczogMTAuMDAgfSxcclxuICAgICdvcGVuYWkvZ3B0LTRvLW1pbmknOiB7IGlucHV0VG9rZW5zOiAwLjE1LCBvdXRwdXRUb2tlbnM6IDAuNjAgfSxcclxuICAgICdhbnRocm9waWMvY2xhdWRlLTMuNS1zb25uZXQnOiB7IGlucHV0VG9rZW5zOiAzLjAwLCBvdXRwdXRUb2tlbnM6IDE1LjAwIH0sXHJcbiAgICAnZ29vZ2xlL2dlbWluaS1wcm8tMS41JzogeyBpbnB1dFRva2VuczogMS4yNSwgb3V0cHV0VG9rZW5zOiA1LjAwIH0sXHJcbiAgICAnbWlzdHJhbGFpL21peHRyYWwtOHg3Yi1pbnN0cnVjdCc6IHsgaW5wdXRUb2tlbnM6IDAuMjQsIG91dHB1dFRva2VuczogMC4yNCB9LFxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQnVkZ2V0Q29uZmlnID0geyBtYXhEb2xsYXI6IDUuMDAsIHdhcm5pbmdUaHJlc2hvbGQ6IDgwIH0pIHtcclxuICAgIHRoaXMuYnVkZ2V0ID0gY29uZmlnO1xyXG4gICAgdGhpcy5sb2FkVXNhZ2VGcm9tU3RvcmFnZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBsb2FkVXNhZ2VGcm9tU3RvcmFnZSgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHN0b3JlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbkJ1ZGdldFVzYWdlJyk7XHJcbiAgICAgIGlmIChzdG9yZWQpIHtcclxuICAgICAgICB0aGlzLnVzYWdlID0gSlNPTi5wYXJzZShzdG9yZWQpO1xyXG4gICAgICAgIC8vIENsZWFuIHVwIG9sZCB1c2FnZSAob2xkZXIgdGhhbiAyNCBob3VycylcclxuICAgICAgICBjb25zdCBjdXRvZmYgPSBEYXRlLm5vdygpIC0gKDI0ICogNjAgKiA2MCAqIDEwMDApO1xyXG4gICAgICAgIHRoaXMudXNhZ2UgPSB0aGlzLnVzYWdlLmZpbHRlcih1ID0+IHUudGltZXN0YW1wID4gY3V0b2ZmKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gbG9hZCB0b2tlbiBidWRnZXQgdXNhZ2U6JywgZXJyb3IpO1xyXG4gICAgICB0aGlzLnVzYWdlID0gW107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNhdmVVc2FnZVRvU3RvcmFnZSgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbkJ1ZGdldFVzYWdlJywgSlNPTi5zdHJpbmdpZnkodGhpcy51c2FnZSkpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gc2F2ZSB0b2tlbiBidWRnZXQgdXNhZ2U6JywgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZXN0aW1hdGVUb2tlbnModGV4dDogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIC8vIFJvdWdoIGVzdGltYXRpb246IH40IGNoYXJhY3RlcnMgcGVyIHRva2VuIGZvciBFbmdsaXNoIHRleHRcclxuICAgIC8vIE1vcmUgYWNjdXJhdGUgd291bGQgYmUgdG8gdXNlIHRpa3Rva2VuLCBidXQgdGhpcyBpcyBnb29kIGVub3VnaFxyXG4gICAgcmV0dXJuIE1hdGguY2VpbCh0ZXh0Lmxlbmd0aCAvIDQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q3VycmVudFNwZW5kKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy51c2FnZS5yZWR1Y2UoKHRvdGFsLCB1c2FnZSkgPT4gdG90YWwgKyB1c2FnZS5jb3N0LCAwKTtcclxuICB9XHJcblxyXG4gIGdldFJlbWFpbmluZ0J1ZGdldCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIHRoaXMuYnVkZ2V0Lm1heERvbGxhciAtIHRoaXMuZ2V0Q3VycmVudFNwZW5kKCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0QnVkZ2V0U3RhdHVzKCk6IHtcclxuICAgIHNwZW50OiBudW1iZXI7XHJcbiAgICByZW1haW5pbmc6IG51bWJlcjtcclxuICAgIHBlcmNlbnRhZ2U6IG51bWJlcjtcclxuICAgIGlzV2FybmluZzogYm9vbGVhbjtcclxuICAgIGlzRXhjZWVkZWQ6IGJvb2xlYW47XHJcbiAgfSB7XHJcbiAgICBjb25zdCBzcGVudCA9IHRoaXMuZ2V0Q3VycmVudFNwZW5kKCk7XHJcbiAgICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmdldFJlbWFpbmluZ0J1ZGdldCgpO1xyXG4gICAgY29uc3QgcGVyY2VudGFnZSA9IChzcGVudCAvIHRoaXMuYnVkZ2V0Lm1heERvbGxhcikgKiAxMDA7XHJcbiAgICBcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNwZW50LFxyXG4gICAgICByZW1haW5pbmcsXHJcbiAgICAgIHBlcmNlbnRhZ2UsXHJcbiAgICAgIGlzV2FybmluZzogcGVyY2VudGFnZSA+PSB0aGlzLmJ1ZGdldC53YXJuaW5nVGhyZXNob2xkLFxyXG4gICAgICBpc0V4Y2VlZGVkOiBzcGVudCA+PSB0aGlzLmJ1ZGdldC5tYXhEb2xsYXJcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYW5BZmZvcmQobW9kZWw6IHN0cmluZywgZXN0aW1hdGVkSW5wdXRUb2tlbnM6IG51bWJlciwgZXN0aW1hdGVkT3V0cHV0VG9rZW5zOiBudW1iZXIgPSA1MDApOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGNvc3QgPSB0aGlzLmNhbGN1bGF0ZUNvc3QobW9kZWwsIGVzdGltYXRlZElucHV0VG9rZW5zLCBlc3RpbWF0ZWRPdXRwdXRUb2tlbnMpO1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVtYWluaW5nQnVkZ2V0KCkgPj0gY29zdDtcclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZUNvc3QobW9kZWw6IHN0cmluZywgaW5wdXRUb2tlbnM6IG51bWJlciwgb3V0cHV0VG9rZW5zOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgcHJpY2luZyA9IHRoaXMubW9kZWxQcmljaW5nW21vZGVsXTtcclxuICAgIGlmICghcHJpY2luZykge1xyXG4gICAgICBjb25zb2xlLndhcm4oYE5vIHByaWNpbmcgaW5mbyBmb3IgbW9kZWw6ICR7bW9kZWx9LCBhc3N1bWluZyBmcmVlYCk7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGlucHV0Q29zdCA9IChpbnB1dFRva2VucyAvIDFfMDAwXzAwMCkgKiBwcmljaW5nLmlucHV0VG9rZW5zO1xyXG4gICAgY29uc3Qgb3V0cHV0Q29zdCA9IChvdXRwdXRUb2tlbnMgLyAxXzAwMF8wMDApICogcHJpY2luZy5vdXRwdXRUb2tlbnM7XHJcbiAgICBcclxuICAgIHJldHVybiBpbnB1dENvc3QgKyBvdXRwdXRDb3N0O1xyXG4gIH1cclxuXHJcbiAgcmVjb3JkVXNhZ2UobW9kZWw6IHN0cmluZywgaW5wdXRUb2tlbnM6IG51bWJlciwgb3V0cHV0VG9rZW5zOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvc3QgPSB0aGlzLmNhbGN1bGF0ZUNvc3QobW9kZWwsIGlucHV0VG9rZW5zLCBvdXRwdXRUb2tlbnMpO1xyXG4gICAgXHJcbiAgICBjb25zdCB1c2FnZTogQnVkZ2V0VXNhZ2UgPSB7XHJcbiAgICAgIG1vZGVsLFxyXG4gICAgICBpbnB1dFRva2VucyxcclxuICAgICAgb3V0cHV0VG9rZW5zLFxyXG4gICAgICBjb3N0LFxyXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy51c2FnZS5wdXNoKHVzYWdlKTtcclxuICAgIHRoaXMuc2F2ZVVzYWdlVG9TdG9yYWdlKCk7XHJcblxyXG4gICAgY29uc29sZS5sb2coYFRva2VuIHVzYWdlIHJlY29yZGVkOmAsIHtcclxuICAgICAgbW9kZWwsXHJcbiAgICAgIGlucHV0VG9rZW5zLFxyXG4gICAgICBvdXRwdXRUb2tlbnMsXHJcbiAgICAgIGNvc3Q6IGNvc3QudG9GaXhlZCg0KSxcclxuICAgICAgdG90YWxTcGVudDogdGhpcy5nZXRDdXJyZW50U3BlbmQoKS50b0ZpeGVkKDQpLFxyXG4gICAgICByZW1haW5pbmc6IHRoaXMuZ2V0UmVtYWluaW5nQnVkZ2V0KCkudG9GaXhlZCg0KVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRVc2FnZVN0YXRzKCk6IHtcclxuICAgIHRvdGFsUmVxdWVzdHM6IG51bWJlcjtcclxuICAgIHRvdGFsSW5wdXRUb2tlbnM6IG51bWJlcjtcclxuICAgIHRvdGFsT3V0cHV0VG9rZW5zOiBudW1iZXI7XHJcbiAgICB0b3RhbENvc3Q6IG51bWJlcjtcclxuICAgIG1vZGVsQnJlYWtkb3duOiBSZWNvcmQ8c3RyaW5nLCB7IHJlcXVlc3RzOiBudW1iZXI7IGNvc3Q6IG51bWJlcjsgdG9rZW5zOiBudW1iZXIgfT47XHJcbiAgfSB7XHJcbiAgICBjb25zdCBtb2RlbEJyZWFrZG93bjogUmVjb3JkPHN0cmluZywgeyByZXF1ZXN0czogbnVtYmVyOyBjb3N0OiBudW1iZXI7IHRva2VuczogbnVtYmVyIH0+ID0ge307XHJcbiAgICBcclxuICAgIGxldCB0b3RhbFJlcXVlc3RzID0gMDtcclxuICAgIGxldCB0b3RhbElucHV0VG9rZW5zID0gMDtcclxuICAgIGxldCB0b3RhbE91dHB1dFRva2VucyA9IDA7XHJcbiAgICBsZXQgdG90YWxDb3N0ID0gMDtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHVzYWdlIG9mIHRoaXMudXNhZ2UpIHtcclxuICAgICAgdG90YWxSZXF1ZXN0cysrO1xyXG4gICAgICB0b3RhbElucHV0VG9rZW5zICs9IHVzYWdlLmlucHV0VG9rZW5zO1xyXG4gICAgICB0b3RhbE91dHB1dFRva2VucyArPSB1c2FnZS5vdXRwdXRUb2tlbnM7XHJcbiAgICAgIHRvdGFsQ29zdCArPSB1c2FnZS5jb3N0O1xyXG5cclxuICAgICAgaWYgKCFtb2RlbEJyZWFrZG93blt1c2FnZS5tb2RlbF0pIHtcclxuICAgICAgICBtb2RlbEJyZWFrZG93blt1c2FnZS5tb2RlbF0gPSB7IHJlcXVlc3RzOiAwLCBjb3N0OiAwLCB0b2tlbnM6IDAgfTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgbW9kZWxCcmVha2Rvd25bdXNhZ2UubW9kZWxdLnJlcXVlc3RzKys7XHJcbiAgICAgIG1vZGVsQnJlYWtkb3duW3VzYWdlLm1vZGVsXS5jb3N0ICs9IHVzYWdlLmNvc3Q7XHJcbiAgICAgIG1vZGVsQnJlYWtkb3duW3VzYWdlLm1vZGVsXS50b2tlbnMgKz0gdXNhZ2UuaW5wdXRUb2tlbnMgKyB1c2FnZS5vdXRwdXRUb2tlbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG90YWxSZXF1ZXN0cyxcclxuICAgICAgdG90YWxJbnB1dFRva2VucyxcclxuICAgICAgdG90YWxPdXRwdXRUb2tlbnMsXHJcbiAgICAgIHRvdGFsQ29zdCxcclxuICAgICAgbW9kZWxCcmVha2Rvd25cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZXNldEJ1ZGdldCgpOiB2b2lkIHtcclxuICAgIHRoaXMudXNhZ2UgPSBbXTtcclxuICAgIHRoaXMuc2F2ZVVzYWdlVG9TdG9yYWdlKCk7XHJcbiAgfVxyXG5cclxuICBzZXRCdWRnZXQoY29uZmlnOiBQYXJ0aWFsPEJ1ZGdldENvbmZpZz4pOiB2b2lkIHtcclxuICAgIHRoaXMuYnVkZ2V0ID0geyAuLi50aGlzLmJ1ZGdldCwgLi4uY29uZmlnIH07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdG9rZW5CdWRnZXQgPSBuZXcgVG9rZW5CdWRnZXRTZXJ2aWNlKCk7Il0sIm5hbWVzIjpbIlRva2VuQnVkZ2V0U2VydmljZSIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwibWF4RG9sbGFyIiwid2FybmluZ1RocmVzaG9sZCIsInVzYWdlIiwibW9kZWxQcmljaW5nIiwiaW5wdXRUb2tlbnMiLCJvdXRwdXRUb2tlbnMiLCJidWRnZXQiLCJsb2FkVXNhZ2VGcm9tU3RvcmFnZSIsInN0b3JlZCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJKU09OIiwicGFyc2UiLCJjdXRvZmYiLCJEYXRlIiwibm93IiwiZmlsdGVyIiwidSIsInRpbWVzdGFtcCIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJzYXZlVXNhZ2VUb1N0b3JhZ2UiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZXN0aW1hdGVUb2tlbnMiLCJ0ZXh0IiwiTWF0aCIsImNlaWwiLCJsZW5ndGgiLCJnZXRDdXJyZW50U3BlbmQiLCJyZWR1Y2UiLCJ0b3RhbCIsImNvc3QiLCJnZXRSZW1haW5pbmdCdWRnZXQiLCJtYXgiLCJnZXRCdWRnZXRTdGF0dXMiLCJzcGVudCIsInJlbWFpbmluZyIsInBlcmNlbnRhZ2UiLCJpc1dhcm5pbmciLCJpc0V4Y2VlZGVkIiwiY2FuQWZmb3JkIiwibW9kZWwiLCJlc3RpbWF0ZWRJbnB1dFRva2VucyIsImVzdGltYXRlZE91dHB1dFRva2VucyIsImNhbGN1bGF0ZUNvc3QiLCJwcmljaW5nIiwiaW5wdXRDb3N0Iiwib3V0cHV0Q29zdCIsInJlY29yZFVzYWdlIiwicHVzaCIsImxvZyIsInRvRml4ZWQiLCJ0b3RhbFNwZW50IiwiZ2V0VXNhZ2VTdGF0cyIsIm1vZGVsQnJlYWtkb3duIiwidG90YWxSZXF1ZXN0cyIsInRvdGFsSW5wdXRUb2tlbnMiLCJ0b3RhbE91dHB1dFRva2VucyIsInRvdGFsQ29zdCIsInJlcXVlc3RzIiwidG9rZW5zIiwicmVzZXRCdWRnZXQiLCJzZXRCdWRnZXQiLCJ0b2tlbkJ1ZGdldCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/tokenBudget.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?d272":
/*!********************************!*\
  !*** supports-color (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/axios","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/axios-retry","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/mime-types","vendor-chunks/is-retry-allowed","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=D%3A%5Ccoding%5Claunch%5CthoughtPolice%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Ccoding%5Claunch%5CthoughtPolice&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();