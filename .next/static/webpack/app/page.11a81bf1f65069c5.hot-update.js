"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/services/analysisService.ts":
/*!*********************************************!*\
  !*** ./src/lib/services/analysisService.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnalysisService: () => (/* binding */ AnalysisService),\n/* harmony export */   analysisService: () => (/* binding */ analysisService)\n/* harmony export */ });\n/* harmony import */ var _redditApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./redditApi */ \"(app-pages-browser)/./src/lib/services/redditApi.ts\");\n/* harmony import */ var _multiModelPipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multiModelPipeline */ \"(app-pages-browser)/./src/lib/services/multiModelPipeline.ts\");\n/* harmony import */ var _cacheService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cacheService */ \"(app-pages-browser)/./src/lib/services/cacheService.ts\");\n/* harmony import */ var _tokenBudget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tokenBudget */ \"(app-pages-browser)/./src/lib/services/tokenBudget.ts\");\n\n\n\n\nclass AnalysisService {\n    setVerbose(verbose) {\n        this.verbose = verbose;\n        _redditApi__WEBPACK_IMPORTED_MODULE_0__.redditApi.setVerbose(verbose);\n        _multiModelPipeline__WEBPACK_IMPORTED_MODULE_1__.multiModelPipeline.setVerbose(verbose);\n    }\n    debug() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (this.verbose) {\n            console.log('[AnalysisService]', ...args);\n        }\n    }\n    async analyzeUser(username) {\n        let analyzerUserId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : '1';\n        try {\n            // Validate username\n            if (!username || username.trim().length === 0) {\n                throw new Error('Username is required');\n            }\n            const cleanUsername = username.trim().replace(/^u\\//, '');\n            this.debug(\"Starting comprehensive analysis for \".concat(cleanUsername));\n            // Check budget status\n            const budgetStatus = _tokenBudget__WEBPACK_IMPORTED_MODULE_3__.tokenBudget.getBudgetStatus();\n            this.debug('Budget status:', budgetStatus);\n            if (budgetStatus.isWarning) {\n                console.warn(\"Budget warning: \".concat(budgetStatus.percentage.toFixed(1), \"% used\"));\n            }\n            // Check cache first with content validation\n            const userData = await _redditApi__WEBPACK_IMPORTED_MODULE_0__.redditApi.getFullUserData(cleanUsername, {\n                maxItems: 5000,\n                maxAge: 365,\n                verbose: this.verbose\n            });\n            if (!userData.user) {\n                throw new Error('User not found on Reddit');\n            }\n            // Check if user has enough content\n            if (userData.comments.length === 0 && userData.posts.length === 0) {\n                throw new Error('User has no public comments or posts to analyze');\n            }\n            this.debug(\"Comprehensive data fetched for \".concat(cleanUsername, \":\"), {\n                comments: userData.comments.length,\n                posts: userData.posts.length,\n                totalContent: userData.comments.length + userData.posts.length,\n                userKarma: userData.user.total_karma,\n                accountAge: Math.floor((Date.now() / 1000 - userData.user.created_utc) / (24 * 60 * 60))\n            });\n            // Check cache with content validation\n            if (_cacheService__WEBPACK_IMPORTED_MODULE_2__.cacheService.hasValidAnalysis(cleanUsername, userData.comments, userData.posts)) {\n                this.debug(\"Using cached analysis for \".concat(cleanUsername));\n                const cachedReport = _cacheService__WEBPACK_IMPORTED_MODULE_2__.cacheService.getAnalysis(cleanUsername, userData.comments, userData.posts);\n                return {\n                    id: \"analysis-cached-\".concat(Date.now(), \"-\").concat(cleanUsername),\n                    targetUsername: cleanUsername,\n                    analyzerUserId,\n                    contradictionsFound: cachedReport.contradictions.length,\n                    confidenceScore: this.calculateWeightedConfidence(cachedReport.contradictions),\n                    analysisDate: new Date().toISOString(),\n                    reportData: cachedReport,\n                    status: 'completed'\n                };\n            }\n            // Perform optimized pipeline analysis\n            this.debug(\"Starting optimized pipeline analysis for \".concat(cleanUsername));\n            try {\n                const reportData = await _multiModelPipeline__WEBPACK_IMPORTED_MODULE_1__.multiModelPipeline.analyzeUser(userData.comments, userData.posts, cleanUsername);\n                this.debug('AI analysis result:', reportData);\n                // Create analysis result with weighted confidence\n                const analysis = {\n                    id: \"analysis-\".concat(Date.now(), \"-\").concat(cleanUsername),\n                    targetUsername: cleanUsername,\n                    analyzerUserId,\n                    contradictionsFound: reportData.contradictions.length,\n                    confidenceScore: this.calculateWeightedConfidence(reportData.contradictions),\n                    analysisDate: new Date().toISOString(),\n                    reportData,\n                    status: 'completed'\n                };\n                this.debug(\"Analysis complete for \".concat(cleanUsername, \":\"), {\n                    contradictionsFound: analysis.contradictionsFound,\n                    weightedConfidence: analysis.confidenceScore,\n                    totalItemsAnalyzed: userData.comments.length + userData.posts.length,\n                    budgetUsed: _tokenBudget__WEBPACK_IMPORTED_MODULE_3__.tokenBudget.getBudgetStatus().spent.toFixed(4)\n                });\n                return analysis;\n            } catch (aiError) {\n                this.debug('AI analysis failed:', aiError);\n                throw aiError;\n            }\n        } catch (error) {\n            this.debug('Analysis failed:', error);\n            // Return failed analysis with error info\n            return {\n                id: \"analysis-failed-\".concat(Date.now()),\n                targetUsername: username,\n                analyzerUserId,\n                contradictionsFound: 0,\n                confidenceScore: 0,\n                analysisDate: new Date().toISOString(),\n                reportData: {\n                    summary: \"Analysis failed: \".concat(error instanceof Error ? error.message : 'Unknown error occurred'),\n                    contradictions: [],\n                    timeline: [],\n                    stats: {\n                        totalComments: 0,\n                        timespan: '0 days',\n                        topSubreddits: [],\n                        sentimentTrend: 0\n                    }\n                },\n                status: 'failed'\n            };\n        }\n    }\n    calculateWeightedConfidence(contradictions) {\n        if (contradictions.length === 0) return 0;\n        // Weight by recency and verification status\n        let totalWeight = 0;\n        let weightedSum = 0;\n        for (const contradiction of contradictions){\n            let weight = 1;\n            // Higher weight for verified contradictions\n            if (contradiction.verified) {\n                weight *= 1.5;\n            }\n            // Higher weight for recent contradictions\n            const dates = contradiction.dates.map((d)=>new Date(d).getTime());\n            const avgDate = (dates[0] + dates[1]) / 2;\n            const ageInDays = (Date.now() - avgDate) / (24 * 60 * 60 * 1000);\n            if (ageInDays < 30) {\n                weight *= 1.3; // Recent contradictions are more significant\n            } else if (ageInDays > 365) {\n                weight *= 0.8; // Older contradictions less significant\n            }\n            // Weight by confidence score\n            weight *= contradiction.confidenceScore / 100;\n            weightedSum += contradiction.confidenceScore * weight;\n            totalWeight += weight;\n        }\n        return Math.round(weightedSum / totalWeight);\n    }\n    async validateUsername(username) {\n        try {\n            const cleanUsername = username.trim().replace(/^u\\//, '');\n            await _redditApi__WEBPACK_IMPORTED_MODULE_0__.redditApi.getUserInfo(cleanUsername);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    async getUserPreview(username) {\n        try {\n            const cleanUsername = username.trim().replace(/^u\\//, '');\n            return await _redditApi__WEBPACK_IMPORTED_MODULE_0__.redditApi.getUserPreview(cleanUsername);\n        } catch (e) {\n            return {\n                exists: false,\n                karma: 0,\n                accountAge: 'Unknown',\n                recentActivity: false,\n                estimatedComments: 0\n            };\n        }\n    }\n    // Enhanced cache management\n    clearUserCache(username) {\n        const cleanUsername = username.trim().replace(/^u\\//, '');\n        _cacheService__WEBPACK_IMPORTED_MODULE_2__.cacheService.clearAnalysis(cleanUsername);\n    }\n    getCacheStats() {\n        return _cacheService__WEBPACK_IMPORTED_MODULE_2__.cacheService.getStats();\n    }\n    getBudgetStats() {\n        return {\n            budget: _tokenBudget__WEBPACK_IMPORTED_MODULE_3__.tokenBudget.getBudgetStatus(),\n            usage: _tokenBudget__WEBPACK_IMPORTED_MODULE_3__.tokenBudget.getUsageStats()\n        };\n    }\n    resetBudget() {\n        _tokenBudget__WEBPACK_IMPORTED_MODULE_3__.tokenBudget.resetBudget();\n    }\n    setBudget(maxDollar) {\n        let warningThreshold = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 80;\n        _tokenBudget__WEBPACK_IMPORTED_MODULE_3__.tokenBudget.setBudget({\n            maxDollar,\n            warningThreshold\n        });\n    }\n    // Debug and monitoring methods\n    getDebugInfo() {\n        return {\n            cache: _cacheService__WEBPACK_IMPORTED_MODULE_2__.cacheService.getDebugInfo(),\n            budget: this.getBudgetStats(),\n            verbose: this.verbose\n        };\n    }\n    // Streaming analysis for large datasets\n    async *analyzeUserStream(username) {\n        const cleanUsername = username.trim().replace(/^u\\//, '');\n        yield {\n            stage: 'validation',\n            progress: 0\n        };\n        try {\n            // Validate user\n            const user = await _redditApi__WEBPACK_IMPORTED_MODULE_0__.redditApi.getUserInfo(cleanUsername);\n            yield {\n                stage: 'validation',\n                progress: 100,\n                data: {\n                    user\n                }\n            };\n            // Stream comments\n            yield {\n                stage: 'fetching',\n                progress: 0\n            };\n            const comments = [];\n            const posts = [];\n            let fetchProgress = 0;\n            for await (const batch of _redditApi__WEBPACK_IMPORTED_MODULE_0__.redditApi.iterateComments(cleanUsername, {\n                maxItems: 5000\n            })){\n                comments.push(...batch);\n                fetchProgress += 10;\n                yield {\n                    stage: 'fetching',\n                    progress: Math.min(fetchProgress, 80)\n                };\n            }\n            // Stream posts\n            for await (const batch of _redditApi__WEBPACK_IMPORTED_MODULE_0__.redditApi.iteratePosts(cleanUsername, {\n                maxItems: 1000\n            })){\n                posts.push(...batch);\n                fetchProgress += 5;\n                yield {\n                    stage: 'fetching',\n                    progress: Math.min(fetchProgress, 100)\n                };\n            }\n            yield {\n                stage: 'fetching',\n                progress: 100,\n                data: {\n                    comments: comments.length,\n                    posts: posts.length\n                }\n            };\n            // Analysis\n            yield {\n                stage: 'analyzing',\n                progress: 0\n            };\n            const reportData = await _multiModelPipeline__WEBPACK_IMPORTED_MODULE_1__.multiModelPipeline.analyzeUser(comments, posts, cleanUsername);\n            yield {\n                stage: 'analyzing',\n                progress: 100,\n                data: reportData\n            };\n            // Complete\n            yield {\n                stage: 'complete',\n                progress: 100,\n                data: reportData\n            };\n        } catch (error) {\n            yield {\n                stage: 'error',\n                progress: 0,\n                data: {\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                }\n            };\n        }\n    }\n    constructor(){\n        this.verbose = false;\n    }\n}\nconst analysisService = new AnalysisService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/analysisService.ts\n"));

/***/ })

});