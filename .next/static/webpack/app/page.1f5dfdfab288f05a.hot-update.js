"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/services/cacheService.ts":
/*!******************************************!*\
  !*** ./src/lib/services/cacheService.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheService: () => (/* binding */ cacheService)\n/* harmony export */ });\nclass CacheService {\n    loadFromStorage() {\n        try {\n            const stored = localStorage.getItem('thoughtPoliceCache');\n            if (stored) {\n                const data = JSON.parse(stored);\n                // Validate cache version\n                if (data.version !== this.CACHE_VERSION) {\n                    console.log('Cache version mismatch, clearing cache');\n                    this.clearAll();\n                    return;\n                }\n                // Load entries\n                if (data.entries) {\n                    for (const [key, entry] of Object.entries(data.entries)){\n                        this.cache.set(key, entry);\n                    }\n                }\n                console.log(\"Loaded \".concat(this.cache.size, \" cache entries from storage\"));\n                this.cleanupExpired();\n            }\n        } catch (error) {\n            console.warn('Failed to load cache from storage:', error);\n            this.clearAll();\n        }\n    }\n    saveToStorage() {\n        const data = {\n            version: this.CACHE_VERSION,\n            entries: Object.fromEntries(this.cache.entries()),\n            lastSaved: Date.now()\n        };\n        try {\n            localStorage.setItem('thoughtPoliceCache', JSON.stringify(data));\n        } catch (error) {\n            console.warn('Failed to save cache to storage:', error);\n            // If storage is full, try to free up space\n            if (error instanceof Error && error.name === 'QuotaExceededError') {\n                this.evictOldest(Math.floor(this.cache.size / 2));\n                try {\n                    localStorage.setItem('thoughtPoliceCache', JSON.stringify(data));\n                } catch (e) {\n                    console.warn('Cache storage still full after eviction');\n                }\n            }\n        }\n    }\n    setupPeriodicCleanup() {\n        // Clean up expired entries every 10 minutes\n        setInterval(()=>{\n            this.cleanupExpired();\n        }, 10 * 60 * 1000);\n    }\n    generateContentHash(comments, posts) {\n        // Create a hash based on the latest content timestamps\n        const latestComment = comments.length > 0 ? Math.max(...comments.map((c)=>c.created_utc)) : 0;\n        const latestPost = posts.length > 0 ? Math.max(...posts.map((p)=>p.created_utc)) : 0;\n        const latest = Math.max(latestComment, latestPost);\n        // Include content count for additional validation\n        const contentSignature = \"\".concat(latest, \"-\").concat(comments.length, \"-\").concat(posts.length);\n        // Simple hash function\n        let hash = 0;\n        for(let i = 0; i < contentSignature.length; i++){\n            const char = contentSignature.charCodeAt(i);\n            hash = (hash << 5) - hash + char;\n            hash = hash & hash; // Convert to 32-bit integer\n        }\n        return Math.abs(hash).toString(36);\n    }\n    getAnalysisKey(username, contentHash) {\n        return \"analysis:\".concat(username.toLowerCase(), \":\").concat(contentHash);\n    }\n    evictOldest(count) {\n        const entries = Array.from(this.cache.entries()).sort((param, param1)=>{\n            let [, a] = param, [, b] = param1;\n            return a.timestamp - b.timestamp;\n        });\n        for(let i = 0; i < Math.min(count, entries.length); i++){\n            this.cache.delete(entries[i][0]);\n        }\n        console.log(\"Evicted \".concat(Math.min(count, entries.length), \" oldest cache entries\"));\n    }\n    cleanupExpired() {\n        const now = Date.now();\n        let cleanedCount = 0;\n        this.cache.forEach((entry, key)=>{\n            if (now > entry.expiresAt) {\n                this.cache.delete(key);\n                cleanedCount++;\n            }\n        });\n        if (cleanedCount > 0) {\n            console.log(\"Cleaned up \".concat(cleanedCount, \" expired cache entries\"));\n            this.saveToStorage();\n        }\n    }\n    /**\r\n   * Store analysis result in cache with content-based invalidation\r\n   */ setAnalysis(username, data) {\n        let comments = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], posts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [], ttl = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.DEFAULT_TTL;\n        const contentHash = this.generateContentHash(comments, posts);\n        const key = this.getAnalysisKey(username, contentHash);\n        const entry = {\n            data,\n            timestamp: Date.now(),\n            expiresAt: Date.now() + ttl,\n            contentHash,\n            version: this.CACHE_VERSION\n        };\n        // Enforce cache size limit\n        if (this.cache.size >= this.MAX_CACHE_SIZE) {\n            this.evictOldest(1);\n        }\n        this.cache.set(key, entry);\n        console.log(\"Cached analysis for user: \".concat(username, \", hash: \").concat(contentHash, \", expires in \").concat(Math.round(ttl / (24 * 60 * 60 * 1000)), \" days\"));\n        this.saveToStorage();\n    }\n    /**\r\n   * Get cached analysis result with content validation\r\n   */ getAnalysis(username) {\n        let comments = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], posts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n        const contentHash = this.generateContentHash(comments, posts);\n        const key = this.getAnalysisKey(username, contentHash);\n        const entry = this.cache.get(key);\n        if (!entry) {\n            this.misses++;\n            // Check if we have any cache for this user (with different content)\n            const userKeys = Array.from(this.cache.keys()).filter((k)=>k.startsWith(\"analysis:\".concat(username.toLowerCase(), \":\")));\n            if (userKeys.length > 0) {\n                console.log(\"Cache miss for user: \".concat(username, \" - content has changed (hash: \").concat(contentHash, \")\"));\n                // Clean up old entries for this user\n                userKeys.forEach((oldKey)=>this.cache.delete(oldKey));\n                this.saveToStorage();\n            }\n            return null;\n        }\n        if (Date.now() > entry.expiresAt) {\n            this.cache.delete(key);\n            this.misses++;\n            console.log(\"Cache expired for user: \".concat(username));\n            this.saveToStorage();\n            return null;\n        }\n        this.hits++;\n        const age = Math.round((Date.now() - entry.timestamp) / (60 * 60 * 1000));\n        console.log(\"Cache hit for user: \".concat(username, \", age: \").concat(age, \" hours, hash: \").concat(contentHash));\n        return entry.data;\n    }\n    /**\r\n   * Check if analysis is cached and still valid\r\n   */ hasValidAnalysis(username) {\n        let comments = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], posts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n        return this.getAnalysis(username, comments, posts) !== null;\n    }\n    /**\r\n   * Clear cache for specific user (all content versions)\r\n   */ clearAnalysis(username) {\n        const userKeys = Array.from(this.cache.keys()).filter((k)=>k.startsWith(\"analysis:\".concat(username.toLowerCase(), \":\")));\n        userKeys.forEach((key)=>this.cache.delete(key));\n        console.log(\"Cleared \".concat(userKeys.length, \" cache entries for user: \").concat(username));\n        this.saveToStorage();\n    }\n    /**\r\n   * Clear all cached data\r\n   */ clearAll() {\n        this.cache.clear();\n        this.hits = 0;\n        this.misses = 0;\n        console.log('Cleared all cached analyses');\n        this.saveToStorage();\n    }\n    /**\r\n   * Get comprehensive cache statistics\r\n   */ getStats() {\n        const now = Date.now();\n        let validEntries = 0;\n        let expiredEntries = 0;\n        let totalSize = 0;\n        this.cache.forEach((entry)=>{\n            if (now <= entry.expiresAt) {\n                validEntries++;\n            } else {\n                expiredEntries++;\n            }\n            // Estimate size (rough approximation)\n            totalSize += JSON.stringify(entry).length;\n        });\n        const totalRequests = this.hits + this.misses;\n        const hitRate = totalRequests > 0 ? this.hits / totalRequests * 100 : 0;\n        return {\n            totalEntries: this.cache.size,\n            validEntries,\n            expiredEntries,\n            totalSize,\n            hitRate\n        };\n    }\n    /**\r\n   * Get cache entries for debugging\r\n   */ getDebugInfo() {\n        const now = Date.now();\n        return Array.from(this.cache.entries()).map((param)=>{\n            let [key, entry] = param;\n            const parts = key.split(':');\n            const username = parts[1] || 'unknown';\n            const contentHash = parts[2] || 'unknown';\n            const ageMs = now - entry.timestamp;\n            const age = ageMs < 60000 ? \"\".concat(Math.round(ageMs / 1000), \"s\") : ageMs < 3600000 ? \"\".concat(Math.round(ageMs / 60000), \"m\") : \"\".concat(Math.round(ageMs / 3600000), \"h\");\n            return {\n                key,\n                username,\n                contentHash,\n                age,\n                size: JSON.stringify(entry).length,\n                isExpired: now > entry.expiresAt\n            };\n        }).sort((a, b)=>a.username.localeCompare(b.username));\n    }\n    constructor(){\n        this.cache = new Map();\n        this.DEFAULT_TTL = 7 * 24 * 60 * 60 * 1000 // 7 days\n        ;\n        this.CACHE_VERSION = '2.0';\n        this.MAX_CACHE_SIZE = 50 // Maximum number of cached analyses\n        ;\n        this.hits = 0;\n        this.misses = 0;\n        this.loadFromStorage();\n        this.setupPeriodicCleanup();\n    }\n}\nconst cacheService = new CacheService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/cacheService.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/services/redditApi.ts":
/*!***************************************!*\
  !*** ./src/lib/services/redditApi.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redditApi: () => (/* binding */ redditApi)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios-retry */ \"(app-pages-browser)/./node_modules/axios-retry/dist/esm/index.js\");\n\n\nclass RedditApiService {\n    setVerbose(verbose) {\n        this.verbose = verbose;\n    }\n    debug() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (this.verbose) {\n            console.log('[RedditAPI]', ...args);\n        }\n    }\n    async makeRequest(url) {\n        let source = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'reddit';\n        try {\n            this.debug('Making request to:', url);\n            const response = await this.axiosInstance.get(url);\n            this.debug('Request successful:', {\n                url,\n                status: response.status\n            });\n            return response.data;\n        } catch (error) {\n            this.debug('Request failed:', {\n                url,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            if (axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(error)) {\n                var _error_response, _error_response1, _error_response2, _error_response3;\n                if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 404) {\n                    throw new Error(source === 'reddit' ? 'User not found' : 'No data found');\n                } else if (((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.status) === 429) {\n                    throw new Error('Rate limit exceeded. Please try again later.');\n                } else if (((_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.status) === 503) {\n                    throw new Error('Service temporarily unavailable. Please try again later.');\n                } else if (((_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : _error_response3.status) && error.response.status >= 500) {\n                    throw new Error(\"Server error occurred (\".concat(error.response.status, \"). Please try again.\"));\n                } else if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n                    throw new Error('Request timeout. Please try again.');\n                }\n            }\n            throw new Error(\"Failed to fetch data: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    delay(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    // Streaming iterator for unlimited Reddit pagination\n    async *iterateComments(username) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const { maxItems = 10000, maxAge = 365 } = options;\n        let totalFetched = 0;\n        let after = null;\n        const cutoffDate = Date.now() / 1000 - maxAge * 24 * 60 * 60;\n        this.debug(\"Starting Reddit comment iteration for \".concat(username, \", max: \").concat(maxItems, \", maxAge: \").concat(maxAge, \" days\"));\n        // Phase 1: Reddit official API (newest ~1000 items)\n        while(totalFetched < maxItems){\n            try {\n                let url = \"\".concat(this.baseUrl, \"/user/\").concat(username, \"/comments.json?limit=100&sort=new\");\n                if (after) {\n                    url += \"&after=\".concat(after);\n                }\n                const data = await this.makeRequest(url, 'reddit');\n                if (!data.data || !data.data.children || data.data.children.length === 0) {\n                    this.debug('No more comments from Reddit API');\n                    break;\n                }\n                const batch = data.data.children.map((child)=>child.data).filter((comment)=>{\n                    return comment.body && comment.body !== '[deleted]' && comment.body !== '[removed]' && comment.body.length > 20 && comment.created_utc >= cutoffDate;\n                }).map((comment)=>({\n                        id: comment.id,\n                        body: comment.body,\n                        created_utc: comment.created_utc,\n                        subreddit: comment.subreddit,\n                        score: comment.score,\n                        permalink: comment.permalink,\n                        author: comment.author,\n                        link_title: comment.link_title\n                    }));\n                if (batch.length > 0) {\n                    yield batch;\n                    totalFetched += batch.length;\n                    this.debug(\"Reddit batch yielded: \".concat(batch.length, \", total: \").concat(totalFetched));\n                }\n                after = data.data.after;\n                if (!after) {\n                    this.debug('Reddit pagination complete');\n                    break;\n                }\n                await this.delay(1000); // Rate limiting\n            } catch (error) {\n                this.debug('Reddit API error:', error instanceof Error ? error.message : 'Unknown error');\n                break;\n            }\n        }\n        // Phase 2: Pushshift for historical data (if we need more and haven't hit limits)\n        if (totalFetched < maxItems && totalFetched < 8000) {\n            this.debug('Switching to Pushshift for historical data');\n            let before = Math.floor(Date.now() / 1000);\n            let pushShiftAttempts = 0;\n            const maxPushShiftAttempts = 8;\n            while(totalFetched < maxItems && pushShiftAttempts < maxPushShiftAttempts){\n                try {\n                    const url = \"\".concat(this.pushShiftUrl, \"/comment/search?author=\").concat(username, \"&size=500&before=\").concat(before, \"&sort=desc\");\n                    const data = await this.makeRequest(url, 'pushshift');\n                    if (!data.data || data.data.length === 0) {\n                        this.debug('No more comments from Pushshift');\n                        break;\n                    }\n                    const batch = data.data.filter((comment)=>{\n                        return comment.body && comment.body !== '[deleted]' && comment.body !== '[removed]' && comment.body.length > 20 && comment.created_utc >= cutoffDate;\n                    }).map((comment)=>({\n                            id: comment.id,\n                            body: comment.body,\n                            created_utc: comment.created_utc,\n                            subreddit: comment.subreddit,\n                            score: comment.score || 1,\n                            permalink: comment.permalink || \"/r/\".concat(comment.subreddit, \"/comments/\").concat(comment.link_id, \"/\").concat(comment.id, \"/\"),\n                            author: comment.author,\n                            link_title: comment.link_title\n                        }));\n                    if (batch.length > 0) {\n                        yield batch;\n                        totalFetched += batch.length;\n                        before = Math.min(...batch.map((c)=>c.created_utc)) - 1;\n                        this.debug(\"Pushshift batch yielded: \".concat(batch.length, \", total: \").concat(totalFetched));\n                    } else {\n                        break;\n                    }\n                    pushShiftAttempts++;\n                    await this.delay(2000); // Pushshift rate limiting\n                } catch (error) {\n                    this.debug('Pushshift error:', error instanceof Error ? error.message : 'Unknown error');\n                    break;\n                }\n            }\n        }\n        this.debug(\"Comment iteration complete: \".concat(totalFetched, \" total comments\"));\n    }\n    // Streaming iterator for posts\n    async *iteratePosts(username) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const { maxItems = 2000, maxAge = 365 } = options;\n        let totalFetched = 0;\n        let after = null;\n        const cutoffDate = Date.now() / 1000 - maxAge * 24 * 60 * 60;\n        this.debug(\"Starting Reddit post iteration for \".concat(username, \", max: \").concat(maxItems));\n        // Reddit API for posts\n        while(totalFetched < maxItems){\n            try {\n                let url = \"\".concat(this.baseUrl, \"/user/\").concat(username, \"/submitted.json?limit=100&sort=new\");\n                if (after) {\n                    url += \"&after=\".concat(after);\n                }\n                const data = await this.makeRequest(url, 'reddit');\n                if (!data.data || !data.data.children || data.data.children.length === 0) {\n                    break;\n                }\n                const batch = data.data.children.map((child)=>child.data).filter((post)=>{\n                    return post.selftext && post.selftext !== '[deleted]' && post.selftext !== '[removed]' && post.selftext.length > 20 && post.created_utc >= cutoffDate;\n                }).map((post)=>({\n                        id: post.id,\n                        title: post.title,\n                        selftext: post.selftext,\n                        created_utc: post.created_utc,\n                        subreddit: post.subreddit,\n                        score: post.score,\n                        permalink: post.permalink,\n                        author: post.author,\n                        num_comments: post.num_comments\n                    }));\n                if (batch.length > 0) {\n                    yield batch;\n                    totalFetched += batch.length;\n                }\n                after = data.data.after;\n                if (!after) break;\n                await this.delay(1000);\n            } catch (error) {\n                this.debug('Posts API error:', error instanceof Error ? error.message : 'Unknown error');\n                break;\n            }\n        }\n        this.debug(\"Post iteration complete: \".concat(totalFetched, \" total posts\"));\n    }\n    // Legacy methods for compatibility\n    async getUserInfo(username) {\n        const url = \"\".concat(this.baseUrl, \"/user/\").concat(username, \"/about.json\");\n        this.debug('Fetching user info for:', username);\n        const data = await this.makeRequest(url, 'reddit');\n        if (!data.data) {\n            throw new Error('User not found');\n        }\n        return {\n            name: data.data.name,\n            created_utc: data.data.created_utc,\n            comment_karma: data.data.comment_karma,\n            link_karma: data.data.link_karma,\n            total_karma: data.data.total_karma,\n            verified: data.data.verified,\n            is_gold: data.data.is_gold,\n            is_mod: data.data.is_mod\n        };\n    }\n    async getUserComments(username) {\n        let maxComments = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5000;\n        const comments = [];\n        for await (const batch of this.iterateComments(username, {\n            maxItems: maxComments\n        })){\n            comments.push(...batch);\n            if (comments.length >= maxComments) break;\n        }\n        return comments.slice(0, maxComments);\n    }\n    async getUserPosts(username) {\n        let maxPosts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2000;\n        const posts = [];\n        for await (const batch of this.iteratePosts(username, {\n            maxItems: maxPosts\n        })){\n            posts.push(...batch);\n            if (posts.length >= maxPosts) break;\n        }\n        return posts.slice(0, maxPosts);\n    }\n    async getFullUserData(username) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        try {\n            this.debug('Fetching comprehensive user data for:', username);\n            // Fetch user info first\n            const user = await this.getUserInfo(username);\n            // Stream all content\n            const comments = [];\n            const posts = [];\n            // Collect comments\n            for await (const batch of this.iterateComments(username, options)){\n                comments.push(...batch);\n                if (comments.length >= (options.maxItems || 5000)) break;\n            }\n            // Collect posts\n            for await (const batch of this.iteratePosts(username, options)){\n                posts.push(...batch);\n                if (posts.length >= 1000) break;\n            }\n            this.debug('Comprehensive data complete:', {\n                username,\n                comments: comments.length,\n                posts: posts.length,\n                totalContent: comments.length + posts.length\n            });\n            return {\n                user,\n                comments,\n                posts\n            };\n        } catch (error) {\n            this.debug('Failed to fetch comprehensive user data:', error instanceof Error ? error.message : 'Unknown error');\n            throw error;\n        }\n    }\n    async getUserPreview(username) {\n        try {\n            const user = await this.getUserInfo(username);\n            // Get a small sample to check for recent activity\n            const sampleComments = [];\n            let batchCount = 0;\n            for await (const batch of this.iterateComments(username, {\n                maxItems: 20\n            })){\n                sampleComments.push(...batch);\n                batchCount++;\n                if (batchCount >= 1) break; // Just first batch for preview\n            }\n            const accountAge = Math.floor((Date.now() / 1000 - user.created_utc) / (24 * 60 * 60));\n            const ageString = accountAge < 30 ? \"\".concat(accountAge, \" days\") : accountAge < 365 ? \"\".concat(Math.floor(accountAge / 30), \" months\") : \"\".concat(Math.floor(accountAge / 365), \" years\");\n            // Better estimation based on karma and account age\n            const dailyKarma = user.comment_karma / Math.max(accountAge, 1);\n            const estimatedComments = Math.min(Math.max(dailyKarma * 2, 100), 8000);\n            return {\n                exists: true,\n                karma: user.total_karma,\n                accountAge: ageString,\n                recentActivity: sampleComments.length > 0,\n                estimatedComments: Math.floor(estimatedComments)\n            };\n        } catch (e) {\n            return {\n                exists: false,\n                karma: 0,\n                accountAge: 'Unknown',\n                recentActivity: false,\n                estimatedComments: 0\n            };\n        }\n    }\n    constructor(){\n        this.baseUrl = '/api/reddit';\n        this.pushShiftUrl = 'https://api.pushshift.io/reddit';\n        this.verbose = false;\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n            timeout: 30000\n        });\n        // Enhanced retry configuration\n        (0,axios_retry__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.axiosInstance, {\n            retries: 3,\n            retryDelay: axios_retry__WEBPACK_IMPORTED_MODULE_0__[\"default\"].exponentialDelay,\n            retryCondition: (error)=>{\n                var _error_response, // Reddit overload\n                _error_response1, // Bad gateway\n                _error_response2;\n                return axios_retry__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNetworkOrIdempotentRequestError(error) || error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ECONNABORTED' || error.message.includes('socket hang up') || ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 503 || ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.status) === 502 || ((_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.status) === 504; // Gateway timeout\n            },\n            onRetry: (retryCount, error, requestConfig)=>{\n                if (this.verbose) {\n                    console.log(\"Retrying request (attempt \".concat(retryCount, \"):\"), requestConfig.url);\n                }\n            }\n        });\n    }\n}\nconst redditApi = new RedditApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/redditApi.ts\n"));

/***/ })

});