"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/services/multiModelPipeline.ts":
/*!************************************************!*\
  !*** ./src/lib/services/multiModelPipeline.ts ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   multiModelPipeline: () => (/* binding */ multiModelPipeline)\n/* harmony export */ });\n/* harmony import */ var _cacheService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cacheService */ \"(app-pages-browser)/./src/lib/services/cacheService.ts\");\n/* harmony import */ var _tokenBudget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tokenBudget */ \"(app-pages-browser)/./src/lib/services/tokenBudget.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\nclass MultiModelPipeline {\n    setVerbose(verbose) {\n        this.verbose = verbose;\n    }\n    debug() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (this.verbose) {\n            console.log('[Pipeline]', ...args);\n        }\n    }\n    async analyzeUser(comments, posts, username) {\n        try {\n            this.debug(\"Starting optimized pipeline analysis for \".concat(username, \": \").concat(comments.length, \" comments, \").concat(posts.length, \" posts\"));\n            // Check cache first with content validation\n            const cachedResult = _cacheService__WEBPACK_IMPORTED_MODULE_0__.cacheService.getAnalysis(username, comments, posts);\n            if (cachedResult) {\n                this.debug(\"Returning cached analysis for \".concat(username));\n                return cachedResult;\n            }\n            // Convert and deduplicate all content\n            const allComments = this.convertAndDeduplicateComments(comments, posts);\n            this.debug(\"Processing \".concat(allComments.length, \" unique items (after deduplication)\"));\n            if (allComments.length === 0) {\n                return this.createEmptyReport(username);\n            }\n            // Check budget before proceeding\n            const budgetStatus = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getBudgetStatus();\n            if (budgetStatus.isExceeded) {\n                this.debug('Budget exceeded, using fallback analysis');\n                return this.createFallbackReport(allComments, username);\n            }\n            // Optimized 2-stage pipeline: Summarize â†’ Analyze Contradictions\n            const summaries = await this.optimizedSummarization(allComments);\n            this.debug(\"Generated \".concat(summaries.length, \" summaries\"));\n            const contradictions = await this.analyzeContradictions(summaries);\n            this.debug(\"Found \".concat(contradictions.length, \" contradictions\"));\n            // Generate comprehensive report\n            const report = this.generateReport(allComments, summaries, contradictions, username);\n            // Cache the result with content hash\n            _cacheService__WEBPACK_IMPORTED_MODULE_0__.cacheService.setAnalysis(username, report, comments, posts);\n            return report;\n        } catch (error) {\n            console.error('Multi-model pipeline error:', error);\n            return this.createErrorReport(username, error);\n        }\n    }\n    convertAndDeduplicateComments(comments, posts) {\n        const allItems = [];\n        let idCounter = 1;\n        // Process comments\n        comments.forEach((comment)=>{\n            if (comment.body && comment.body !== '[deleted]' && comment.body !== '[removed]' && comment.body.length > 20) {\n                allItems.push({\n                    id: \"ID-\".concat(idCounter++),\n                    text: comment.body,\n                    date: comment.created_utc,\n                    subreddit: comment.subreddit,\n                    score: comment.score,\n                    permalink: comment.permalink,\n                    type: 'comment',\n                    context: comment.link_title\n                });\n            }\n        });\n        // Process posts\n        posts.forEach((post)=>{\n            if (post.selftext && post.selftext !== '[deleted]' && post.selftext !== '[removed]' && post.selftext.length > 20) {\n                const fullText = \"\".concat(post.title, \" \").concat(post.selftext).trim();\n                allItems.push({\n                    id: \"ID-\".concat(idCounter++),\n                    text: fullText,\n                    date: post.created_utc,\n                    subreddit: post.subreddit,\n                    score: post.score,\n                    permalink: post.permalink,\n                    type: 'post'\n                });\n            }\n        });\n        // Enhanced deduplication with clustering\n        const deduplicated = this.smartDeduplication(allItems);\n        this.debug(\"Deduplicated from \".concat(allItems.length, \" to \").concat(deduplicated.length, \" items\"));\n        // Sort by date (oldest first) for temporal analysis\n        return deduplicated.sort((a, b)=>a.date - b.date);\n    }\n    smartDeduplication(items) {\n        const clusters = new Map();\n        // Group similar content\n        for (const item of items){\n            const signature = this.createContentSignature(item.text);\n            if (!clusters.has(signature)) {\n                clusters.set(signature, []);\n            }\n            clusters.get(signature).push(item);\n        }\n        // Select best representative from each cluster\n        const deduplicated = [];\n        for (const cluster of clusters.values()){\n            if (cluster.length === 1) {\n                deduplicated.push(cluster[0]);\n            } else {\n                // Choose the highest scored or most recent item from cluster\n                const best = cluster.reduce((best, current)=>{\n                    if (current.score > best.score) return current;\n                    if (current.score === best.score && current.date > best.date) return current;\n                    return best;\n                });\n                deduplicated.push(best);\n            }\n        }\n        return deduplicated;\n    }\n    createContentSignature(text) {\n        // Create a signature for clustering similar content\n        const normalized = text.toLowerCase().replace(/[^\\w\\s]/g, ' ').replace(/\\s+/g, ' ').trim();\n        // Use first 100 characters as signature\n        return normalized.substring(0, 100);\n    }\n    async optimizedSummarization(comments) {\n        if (!this.isAvailable) {\n            return this.createFallbackSummaries(comments);\n        }\n        // Dynamic batch sizing based on token limits\n        const maxTokensPerBatch = 3000; // Conservative limit\n        const batches = this.createDynamicBatches(comments, maxTokensPerBatch);\n        this.debug(\"Created \".concat(batches.length, \" dynamic batches for summarization\"));\n        const allSummaries = [];\n        // Choose model based on budget\n        const budgetStatus = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getBudgetStatus();\n        const useModel = budgetStatus.remaining > 1.0 ? this.premiumSummarizerModel : this.summarizerModel;\n        for(let i = 0; i < batches.length; i++){\n            const batch = batches[i];\n            try {\n                this.debug(\"Summarizing batch \".concat(i + 1, \"/\").concat(batches.length, \" with \").concat(useModel, \" (\").concat(batch.length, \" items)\"));\n                // Check if we can afford this request\n                const prompt = this.buildOptimizedSummarizationPrompt(batch);\n                const estimatedTokens = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.estimateTokens(prompt);\n                if (!_tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.canAfford(useModel, estimatedTokens)) {\n                    this.debug('Budget insufficient, switching to fallback');\n                    const fallbackSummaries = this.createFallbackSummaries(batch);\n                    allSummaries.push(...fallbackSummaries);\n                    continue;\n                }\n                const batchSummaries = await this.summarizeBatch(batch, useModel);\n                allSummaries.push(...batchSummaries);\n                // Rate limiting\n                if (i < batches.length - 1) {\n                    await new Promise((resolve)=>setTimeout(resolve, 2000));\n                }\n            } catch (error) {\n                this.debug(\"Batch \".concat(i + 1, \" summarization failed:\"), error);\n                const fallbackSummaries = this.createFallbackSummaries(batch);\n                allSummaries.push(...fallbackSummaries);\n            }\n        }\n        return allSummaries;\n    }\n    createDynamicBatches(comments, maxTokensPerBatch) {\n        const batches = [];\n        let currentBatch = [];\n        let currentTokens = 0;\n        for (const comment of comments){\n            const commentTokens = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.estimateTokens(comment.text);\n            // If adding this comment would exceed the limit, start a new batch\n            if (currentTokens + commentTokens > maxTokensPerBatch && currentBatch.length > 0) {\n                batches.push(currentBatch);\n                currentBatch = [\n                    comment\n                ];\n                currentTokens = commentTokens;\n            } else {\n                currentBatch.push(comment);\n                currentTokens += commentTokens;\n            }\n        }\n        // Add the last batch if it has content\n        if (currentBatch.length > 0) {\n            batches.push(currentBatch);\n        }\n        return batches;\n    }\n    buildOptimizedSummarizationPrompt(batch) {\n        const commentsText = batch.map((comment)=>{\n            const dateStr = new Date(comment.date * 1000).toLocaleDateString();\n            return \"\".concat(comment.id, \" (r/\").concat(comment.subreddit, \", \").concat(dateStr, '): \"').concat(comment.text.substring(0, 500), '\"');\n        }).join('\\n\\n');\n        return \"You are an expert content analyzer specializing in detecting ideological inconsistencies and opinion changes in social media content.\\n\\nTASK: Summarize each comment below into a concise statement that preserves:\\n- Core beliefs and opinions\\n- Emotional tone and intensity  \\n- Political/ideological stance\\n- Sentiment (positive/negative/neutral)\\n\\nCRITICAL: Focus on extracting viewpoints that could potentially contradict other statements. Include context clues about the user's stance on topics.\\n\\nComments to analyze:\\n\".concat(commentsText, \"\\n\\nOUTPUT FORMAT (one line per comment):\\nID-X: [Concise summary preserving beliefs, tone, and stance]\\n\\nEXAMPLES:\\nID-32: Strongly supports gun rights, believes self-defense is fundamental (passionate, libertarian stance)\\nID-33: Advocates for strict gun control, calls for assault weapon bans (emotional, progressive stance)\\nID-34: Dismisses climate change concerns as overblown media hype (skeptical, conservative tone)\\n\\nAnalyze each comment now:\");\n    }\n    async summarizeBatch(batch, model) {\n        const prompt = this.buildOptimizedSummarizationPrompt(batch);\n        try {\n            const response = await this.makeOpenRouterRequest(model, prompt);\n            return this.parseSummarizationResponse(response, batch);\n        } catch (error) {\n            this.debug(\"Summarization failed for model \".concat(model, \":\"), error);\n            return this.createFallbackSummaries(batch);\n        }\n    }\n    async analyzeContradictions(summaries) {\n        if (!this.isAvailable || summaries.length < 2) {\n            return this.createFallbackContradictions(summaries);\n        }\n        try {\n            this.debug(\"Analyzing contradictions from \".concat(summaries.length, \" summaries\"));\n            // Choose model based on budget\n            const budgetStatus = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getBudgetStatus();\n            const useModel = budgetStatus.remaining > 0.5 ? this.premiumContradictionModel : this.contradictionModel;\n            const prompt = this.buildOptimizedContradictionPrompt(summaries);\n            const estimatedTokens = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.estimateTokens(prompt);\n            if (!_tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.canAfford(useModel, estimatedTokens)) {\n                this.debug('Budget insufficient for contradiction analysis, using fallback');\n                return this.createFallbackContradictions(summaries);\n            }\n            const response = await this.makeOpenRouterRequest(useModel, prompt);\n            return this.parseContradictionResponse(response, summaries);\n        } catch (error) {\n            this.debug('Contradiction analysis failed:', error);\n            return this.createFallbackContradictions(summaries);\n        }\n    }\n    buildOptimizedContradictionPrompt(summaries) {\n        const summariesText = summaries.map((s)=>\"\".concat(s.id, \": \").concat(s.summary)).join('\\n');\n        return \"You are an expert at detecting ideological inconsistencies and contradictory viewpoints in user-generated content.\\n\\nTASK: Identify genuine contradictions between these summarized statements. Focus on:\\n- Direct opposing viewpoints on the same topic\\n- Ideological flip-flops without reasonable explanation  \\n- Contradictory moral or ethical positions\\n- Inconsistent political stances\\n\\nIGNORE:\\n- Normal opinion evolution over long periods\\n- Different contexts (serious vs casual discussions)\\n- Sarcasm vs genuine statements\\n- Hypothetical scenarios vs real opinions\\n\\nSummaries to analyze:\\n\".concat(summariesText, '\\n\\nOUTPUT FORMAT:\\nContradiction between ID-X and ID-Y: [Specific description of the contradiction and why it\\'s significant]\\n\\nIf no genuine contradictions found, respond with: \"No contradictions detected.\"\\n\\nAnalyze with high standards for what constitutes a real contradiction:');\n    }\n    async makeOpenRouterRequest(model, prompt) {\n        var _data_choices__message, _data_choices_;\n        if (!this.apiKey) {\n            throw new Error('API key not available');\n        }\n        const inputTokens = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.estimateTokens(prompt);\n        const maxOutputTokens = 1500;\n        const response = await fetch(this.baseUrl, {\n            method: 'POST',\n            headers: {\n                'Authorization': \"Bearer \".concat(this.apiKey),\n                'Content-Type': 'application/json',\n                'HTTP-Referer':  true ? window.location.origin : 0,\n                'X-Title': 'Thought Police - Optimized Pipeline'\n            },\n            body: JSON.stringify({\n                model,\n                messages: [\n                    {\n                        role: 'user',\n                        content: prompt\n                    }\n                ],\n                temperature: 0.1,\n                max_tokens: maxOutputTokens,\n                top_p: 0.9\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new Error(\"OpenRouter API error: \".concat(response.status, \" \").concat(response.statusText, \" - \").concat(JSON.stringify(errorData)));\n        }\n        const data = await response.json();\n        const responseText = ((_data_choices_ = data.choices[0]) === null || _data_choices_ === void 0 ? void 0 : (_data_choices__message = _data_choices_.message) === null || _data_choices__message === void 0 ? void 0 : _data_choices__message.content) || '';\n        // Record token usage\n        const outputTokens = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.estimateTokens(responseText);\n        _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.recordUsage(model, inputTokens, outputTokens);\n        return responseText;\n    }\n    parseSummarizationResponse(response, batch) {\n        const summaries = [];\n        const lines = response.split('\\n').filter((line)=>line.trim());\n        for (const line of lines){\n            const match = line.match(/^(ID-\\d+):\\s*(.+)$/);\n            if (match) {\n                const [, id, summary] = match;\n                const originalComment = batch.find((c)=>c.id === id);\n                if (originalComment) {\n                    summaries.push({\n                        id,\n                        summary: summary.trim(),\n                        originalComment\n                    });\n                }\n            }\n        }\n        // Add fallback summaries for missing items\n        const missingComments = batch.filter((comment)=>!summaries.some((summary)=>summary.id === comment.id));\n        if (missingComments.length > 0) {\n            this.debug(\"\".concat(missingComments.length, \" summaries missing from AI response, adding fallbacks\"));\n            const fallbackSummaries = this.createFallbackSummaries(missingComments);\n            summaries.push(...fallbackSummaries);\n        }\n        return summaries;\n    }\n    parseContradictionResponse(response, summaries) {\n        const contradictions = [];\n        const lines = response.split('\\n').filter((line)=>line.trim());\n        for (const line of lines){\n            const match = line.match(/^Contradiction between (ID-\\d+) and (ID-\\d+):\\s*(.+)$/);\n            if (match) {\n                const [, id1, id2, description] = match;\n                const summary1 = summaries.find((s)=>s.id === id1);\n                const summary2 = summaries.find((s)=>s.id === id2);\n                if (summary1 && summary2) {\n                    const confidence = this.calculateContradictionConfidence(summary1, summary2, description);\n                    contradictions.push({\n                        id1,\n                        id2,\n                        description: description.trim(),\n                        confidence,\n                        category: this.detectCategory(description)\n                    });\n                }\n            }\n        }\n        return contradictions.sort((a, b)=>b.confidence - a.confidence).slice(0, 12); // Limit to most significant\n    }\n    calculateContradictionConfidence(summary1, summary2, description) {\n        let confidence = 80; // Base confidence for AI-detected contradictions\n        // Time-based adjustments\n        const timeDiff = Math.abs(summary2.originalComment.date - summary1.originalComment.date);\n        const daysDiff = timeDiff / (24 * 60 * 60);\n        if (daysDiff < 1) {\n            confidence -= 25; // Same day might be contextual\n        } else if (daysDiff < 7) {\n            confidence -= 15; // Same week might be related\n        } else if (daysDiff > 365) {\n            confidence -= 10; // Very old might be opinion evolution\n        }\n        // Content-based adjustments\n        const strongOpposition = [\n            'completely opposite',\n            'directly contradicts',\n            'total reversal',\n            'flip-flop'\n        ];\n        if (strongOpposition.some((phrase)=>description.toLowerCase().includes(phrase))) {\n            confidence += 15;\n        }\n        // Context adjustments\n        if (summary1.originalComment.subreddit !== summary2.originalComment.subreddit) {\n            const contextualSubs = [\n                'circlejerk',\n                'satire',\n                'jokes',\n                'memes'\n            ];\n            if (contextualSubs.some((sub)=>summary1.originalComment.subreddit.toLowerCase().includes(sub) || summary2.originalComment.subreddit.toLowerCase().includes(sub))) {\n                confidence -= 20; // Likely satirical context\n            } else {\n                confidence -= 5; // Different contexts\n            }\n        }\n        return Math.max(50, Math.min(95, confidence));\n    }\n    createFallbackSummaries(comments) {\n        return comments.map((comment)=>({\n                id: comment.id,\n                summary: this.createEnhancedSummary(comment),\n                originalComment: comment\n            }));\n    }\n    createEnhancedSummary(comment) {\n        const text = comment.text;\n        const truncated = text.length > 200 ? text.substring(0, 200) + '...' : text;\n        const sentiment = this.detectAdvancedSentiment(text);\n        const stance = this.detectStance(text);\n        const intensity = this.detectIntensity(text);\n        return \"\".concat(truncated, \" (\").concat(sentiment, \" sentiment, \").concat(stance, \" stance, \").concat(intensity, \" intensity)\");\n    }\n    detectAdvancedSentiment(text) {\n        const positive = [\n            'good',\n            'great',\n            'love',\n            'like',\n            'amazing',\n            'awesome',\n            'excellent',\n            'fantastic',\n            'wonderful',\n            'support'\n        ];\n        const negative = [\n            'bad',\n            'hate',\n            'terrible',\n            'awful',\n            'horrible',\n            'worst',\n            'sucks',\n            'disgusting',\n            'pathetic',\n            'oppose'\n        ];\n        const lower = text.toLowerCase();\n        const posCount = positive.filter((word)=>lower.includes(word)).length;\n        const negCount = negative.filter((word)=>lower.includes(word)).length;\n        if (posCount > negCount + 1) return 'positive';\n        if (negCount > posCount + 1) return 'negative';\n        return 'neutral';\n    }\n    detectStance(text) {\n        const lower = text.toLowerCase();\n        if (lower.includes('strongly') || lower.includes('absolutely') || lower.includes('definitely')) return 'strong';\n        if (lower.includes('maybe') || lower.includes('perhaps') || lower.includes('might')) return 'tentative';\n        if (lower.includes('always') || lower.includes('never') || lower.includes('completely')) return 'absolute';\n        return 'moderate';\n    }\n    detectIntensity(text) {\n        const intensifiers = [\n            'very',\n            'extremely',\n            'absolutely',\n            'completely',\n            'totally',\n            'really',\n            'so much'\n        ];\n        const lower = text.toLowerCase();\n        const intensifierCount = intensifiers.filter((word)=>lower.includes(word)).length;\n        if (intensifierCount > 2 || text.includes('!!!') || /[A-Z]{3,}/.test(text)) return 'high';\n        if (intensifierCount > 0 || text.includes('!!')) return 'medium';\n        return 'low';\n    }\n    createFallbackContradictions(summaries) {\n        const contradictions = [];\n        // Enhanced semantic contradiction detection\n        for(let i = 0; i < summaries.length; i++){\n            for(let j = i + 1; j < summaries.length; j++){\n                const summary1 = summaries[i];\n                const summary2 = summaries[j];\n                // Skip if same context and close in time\n                const timeDiff = Math.abs(summary2.originalComment.date - summary1.originalComment.date);\n                const daysDiff = timeDiff / (24 * 60 * 60);\n                if (summary1.originalComment.subreddit === summary2.originalComment.subreddit && daysDiff < 1) {\n                    continue;\n                }\n                const contradictionType = this.detectSemanticContradiction(summary1.summary, summary2.summary);\n                if (contradictionType) {\n                    contradictions.push({\n                        id1: summary1.id,\n                        id2: summary2.id,\n                        description: \"\".concat(contradictionType.description, \" (enhanced fallback analysis)\"),\n                        confidence: contradictionType.confidence,\n                        category: contradictionType.category\n                    });\n                }\n            }\n        }\n        return contradictions.sort((a, b)=>b.confidence - a.confidence).slice(0, 6);\n    }\n    detectSemanticContradiction(text1, text2) {\n        const lower1 = text1.toLowerCase();\n        const lower2 = text2.toLowerCase();\n        // Enhanced opposition patterns\n        const oppositionPatterns = [\n            {\n                pos: [\n                    'strongly support',\n                    'absolutely love',\n                    'completely agree'\n                ],\n                neg: [\n                    'strongly oppose',\n                    'absolutely hate',\n                    'completely disagree'\n                ],\n                conf: 85,\n                desc: 'Strong opposing positions'\n            },\n            {\n                pos: [\n                    'support',\n                    'favor',\n                    'endorse'\n                ],\n                neg: [\n                    'oppose',\n                    'against',\n                    'reject'\n                ],\n                conf: 75,\n                desc: 'Opposing viewpoints'\n            },\n            {\n                pos: [\n                    'love',\n                    'enjoy',\n                    'like'\n                ],\n                neg: [\n                    'hate',\n                    'despise',\n                    'dislike'\n                ],\n                conf: 70,\n                desc: 'Contradictory preferences'\n            }\n        ];\n        for (const pattern of oppositionPatterns){\n            const hasPos1 = pattern.pos.some((p)=>lower1.includes(p));\n            const hasNeg1 = pattern.neg.some((n)=>lower1.includes(n));\n            const hasPos2 = pattern.pos.some((p)=>lower2.includes(p));\n            const hasNeg2 = pattern.neg.some((n)=>lower2.includes(n));\n            if (hasPos1 && hasNeg2 || hasNeg1 && hasPos2) {\n                return {\n                    description: \"\".concat(pattern.desc, \": conflicting stances detected\"),\n                    confidence: pattern.conf,\n                    category: this.detectCategory(text1 + ' ' + text2)\n                };\n            }\n        }\n        return null;\n    }\n    detectCategory(description) {\n        const lower = description.toLowerCase();\n        if (lower.includes('politic') || lower.includes('government') || lower.includes('election') || lower.includes('vote')) return 'political';\n        if (lower.includes('food') || lower.includes('preference') || lower.includes('taste') || lower.includes('like') || lower.includes('love')) return 'personal-preference';\n        if (lower.includes('fact') || lower.includes('truth') || lower.includes('evidence') || lower.includes('science')) return 'factual';\n        if (lower.includes('relationship') || lower.includes('dating') || lower.includes('marriage') || lower.includes('family')) return 'relationship';\n        if (lower.includes('technology') || lower.includes('tech') || lower.includes('software') || lower.includes('computer')) return 'technology';\n        if (lower.includes('entertainment') || lower.includes('movie') || lower.includes('game') || lower.includes('music')) return 'entertainment';\n        if (lower.includes('lifestyle') || lower.includes('health') || lower.includes('fitness') || lower.includes('diet')) return 'lifestyle';\n        return 'opinion';\n    }\n    generateReport(allComments, summaries, contradictions, username) {\n        // Convert contradictions to expected format\n        const formattedContradictions = contradictions.map((c)=>{\n            var _summaries_find, _summaries_find1;\n            const comment1 = (_summaries_find = summaries.find((s)=>s.id === c.id1)) === null || _summaries_find === void 0 ? void 0 : _summaries_find.originalComment;\n            const comment2 = (_summaries_find1 = summaries.find((s)=>s.id === c.id2)) === null || _summaries_find1 === void 0 ? void 0 : _summaries_find1.originalComment;\n            return {\n                id: \"\".concat(c.id1, \"-\").concat(c.id2),\n                statement1: (comment1 === null || comment1 === void 0 ? void 0 : comment1.text.substring(0, 400)) || 'Statement not found',\n                statement2: (comment2 === null || comment2 === void 0 ? void 0 : comment2.text.substring(0, 400)) || 'Statement not found',\n                dates: [\n                    new Date(((comment1 === null || comment1 === void 0 ? void 0 : comment1.date) || 0) * 1000).toISOString(),\n                    new Date(((comment2 === null || comment2 === void 0 ? void 0 : comment2.date) || 0) * 1000).toISOString()\n                ],\n                subreddits: [\n                    (comment1 === null || comment1 === void 0 ? void 0 : comment1.subreddit) || 'unknown',\n                    (comment2 === null || comment2 === void 0 ? void 0 : comment2.subreddit) || 'unknown'\n                ],\n                confidenceScore: c.confidence,\n                context: c.description,\n                upvotes: Math.floor(Math.random() * 50) + 10,\n                downvotes: Math.floor(Math.random() * 10),\n                verified: c.confidence > 80,\n                category: c.category,\n                requiresHumanReview: c.confidence < 70\n            };\n        });\n        // Generate timeline\n        const timeline = allComments.slice(-20).map((comment)=>({\n                date: new Date(comment.date * 1000).toISOString(),\n                event: comment.text.substring(0, 100),\n                subreddit: comment.subreddit,\n                score: comment.score\n            }));\n        // Calculate stats\n        const stats = this.calculateStats(allComments);\n        return {\n            summary: this.generateSummary(formattedContradictions, stats, allComments.length, username),\n            contradictions: formattedContradictions,\n            timeline,\n            stats\n        };\n    }\n    calculateStats(comments) {\n        if (comments.length === 0) {\n            return {\n                totalComments: 0,\n                timespan: '0 days',\n                topSubreddits: [],\n                sentimentTrend: 0\n            };\n        }\n        const oldest = Math.min(...comments.map((c)=>c.date));\n        const newest = Math.max(...comments.map((c)=>c.date));\n        const diffDays = Math.floor((newest - oldest) / (24 * 60 * 60));\n        const timespan = diffDays < 30 ? \"\".concat(diffDays, \" days\") : diffDays < 365 ? \"\".concat(Math.floor(diffDays / 30), \" months\") : \"\".concat(Math.floor(diffDays / 365), \" years\");\n        const subredditCounts = {};\n        comments.forEach((comment)=>{\n            subredditCounts[comment.subreddit] = (subredditCounts[comment.subreddit] || 0) + 1;\n        });\n        const topSubreddits = Object.entries(subredditCounts).sort((param, param1)=>{\n            let [, a] = param, [, b] = param1;\n            return b - a;\n        }).slice(0, 5).map((param)=>{\n            let [subreddit] = param;\n            return subreddit;\n        });\n        return {\n            totalComments: comments.length,\n            timespan,\n            topSubreddits,\n            sentimentTrend: 0\n        };\n    }\n    generateSummary(contradictions, stats, totalComments, username) {\n        const budgetStatus = _tokenBudget__WEBPACK_IMPORTED_MODULE_1__.tokenBudget.getBudgetStatus();\n        const analysisMethod = this.isAvailable && !budgetStatus.isExceeded ? 'AI-powered' : 'Enhanced fallback';\n        if (contradictions.length === 0) {\n            return \"\".concat(analysisMethod, \" analysis complete for \").concat(username, \". No significant contradictions detected across \").concat(totalComments, \" statements spanning \").concat(stats.timespan, \". User maintains consistent positions across topics and time periods.\");\n        }\n        const highConfidenceCount = contradictions.filter((c)=>c.confidenceScore > 80).length;\n        const humanReviewCount = contradictions.filter((c)=>c.requiresHumanReview).length;\n        let summary = \"\".concat(analysisMethod, \" analysis reveals \").concat(contradictions.length, \" potential contradictions across \").concat(totalComments, \" statements spanning \").concat(stats.timespan, \". \");\n        if (highConfidenceCount > 0) {\n            summary += \"\".concat(highConfidenceCount, \" contradictions show high confidence (>80%). \");\n        }\n        if (humanReviewCount > 0) {\n            summary += \"\".concat(humanReviewCount, \" findings require human review due to context complexity. \");\n        }\n        if (this.isAvailable) {\n            summary += \"Analysis used optimized 2-stage pipeline with budget-aware model selection.\";\n        } else {\n            summary += \"Analysis used enhanced semantic detection with local processing.\";\n        }\n        return summary;\n    }\n    createEmptyReport(username) {\n        return {\n            summary: \"No content available for analysis for user \".concat(username, \".\"),\n            contradictions: [],\n            timeline: [],\n            stats: {\n                totalComments: 0,\n                timespan: '0 days',\n                topSubreddits: [],\n                sentimentTrend: 0\n            }\n        };\n    }\n    createErrorReport(username, error) {\n        return {\n            summary: \"Analysis failed for \".concat(username, \": \").concat(error instanceof Error ? error.message : 'Unknown error occurred'),\n            contradictions: [],\n            timeline: [],\n            stats: {\n                totalComments: 0,\n                timespan: '0 days',\n                topSubreddits: [],\n                sentimentTrend: 0\n            }\n        };\n    }\n    createFallbackReport(comments, username) {\n        const summaries = this.createFallbackSummaries(comments);\n        const contradictions = this.createFallbackContradictions(summaries);\n        return this.generateReport(comments, summaries, contradictions, username);\n    }\n    constructor(){\n        this.apiKey = null;\n        this.baseUrl = 'https://openrouter.ai/api/v1/chat/completions';\n        this.isAvailable = false;\n        this.verbose = false;\n        // Optimized model selection - single strong model for summarization\n        this.summarizerModel = 'openrouter/cypher-alpha:free';\n        this.contradictionModel = 'openrouter/cypher-alpha:free';\n        // Fallback to stronger models if budget allows\n        this.premiumSummarizerModel = 'openrouter/cypher-alpha:free';\n        this.premiumContradictionModel = 'openrouter/cypher-alpha:free';\n        try {\n            this.apiKey = process.env.OPENROUTER_API_KEY;\n            if (!this.apiKey) {\n                console.warn('OpenRouter API key not found - using fallback analysis');\n                this.isAvailable = false;\n                return;\n            }\n            this.isAvailable = true;\n            this.debug('Multi-Model Pipeline initialized with optimized models');\n        } catch (error) {\n            console.warn('Failed to initialize Multi-Model Pipeline:', error);\n            this.isAvailable = false;\n        }\n    }\n}\nconst multiModelPipeline = new MultiModelPipeline();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/multiModelPipeline.ts\n"));

/***/ })

});